!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("ndarray"),require("ndarray-linear-interpolate"),require("get-pixels")):"function"==typeof define&&define.amd?define("Quagga",["ndarray","ndarray-linear-interpolate","get-pixels"],t):"object"==typeof exports?exports.Quagga=t(require("ndarray"),require("ndarray-linear-interpolate"),require("get-pixels")):e.Quagga=t(e.ndarray,e["ndarray-linear-interpolate"],e["get-pixels"])}(global,function(e,t,r){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="/",r(r.s=22)}([function(e,t){e.exports=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}},function(e,t){function r(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e.exports=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function r(t){return e.exports=r=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},r(t)}e.exports=r},function(e,t,r){var n=r(8),i=r(6);e.exports=function(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?i(e):t}},function(e,t,r){var n=r(15);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&n(e,t)}},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t,r){r(3);var n=r(16);function i(t,r,a){return"undefined"!=typeof Reflect&&Reflect.get?e.exports=i=Reflect.get:e.exports=i=function(e,t,r){var i=n(e,t);if(i){var a=Object.getOwnPropertyDescriptor(i,t);return a.get?a.get.call(r):a.value}},i(t,r,a||t)}e.exports=i},function(e,t){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function n(t){return"function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?e.exports=n=function(e){return r(e)}:e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":r(e)},n(t)}e.exports=n},function(e,t,r){var n=r(12),i=r(13),a=r(14);e.exports=function(e){return n(e)||i(e)||a()}},function(e,t,r){e.exports=r(17)},function(e,t){function r(e,t,r,n,i,a,o){try{var s=e[a](o),u=s.value}catch(e){return void r(e)}s.done?t(u):Promise.resolve(u).then(n,i)}e.exports=function(e){return function(){var t=this,n=arguments;return new Promise(function(i,a){var o=e.apply(t,n);function s(e){r(o,i,a,s,u,"next",e)}function u(e){r(o,i,a,s,u,"throw",e)}s(void 0)})}}},function(e,t){e.exports=function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}},function(e,t){e.exports=function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(e,t){function r(t,n){return e.exports=r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},r(t,n)}e.exports=r},function(e,t,r){var n=r(3);e.exports=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=n(e)););return e}},function(e,t,r){var n=function(){return this||"object"==typeof self&&self}()||Function("return this")(),i=n.regeneratorRuntime&&Object.getOwnPropertyNames(n).indexOf("regeneratorRuntime")>=0,a=i&&n.regeneratorRuntime;if(n.regeneratorRuntime=void 0,e.exports=r(18),i)n.regeneratorRuntime=a;else try{delete n.regeneratorRuntime}catch(e){n.regeneratorRuntime=void 0}},function(e,t){!function(t){"use strict";var r,n=Object.prototype,i=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag",c="object"==typeof e,h=t.regeneratorRuntime;if(h)c&&(e.exports=h);else{(h=t.regeneratorRuntime=c?e.exports:{}).wrap=b;var l="suspendedStart",f="suspendedYield",d="executing",v="completed",_={},p={};p[o]=function(){return this};var g=Object.getPrototypeOf,y=g&&g(g(z([])));y&&y!==n&&i.call(y,o)&&(p=y);var m=C.prototype=x.prototype=Object.create(p);k.prototype=m.constructor=C,C.constructor=k,C[u]=k.displayName="GeneratorFunction",h.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===k||"GeneratorFunction"===(t.displayName||t.name))},h.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,C):(e.__proto__=C,u in e||(e[u]="GeneratorFunction")),e.prototype=Object.create(m),e},h.awrap=function(e){return{__await:e}},A(S.prototype),S.prototype[s]=function(){return this},h.AsyncIterator=S,h.async=function(e,t,r,n){var i=new S(b(e,t,r,n));return h.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},A(m),m[u]="Generator",m[o]=function(){return this},m.toString=function(){return"[object Generator]"},h.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},h.values=z,R.prototype={constructor:R,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(O),!e)for(var t in this)"t"===t.charAt(0)&&i.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=r)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(n,i){return s.type="throw",s.arg=e,t.next=n,i&&(t.method="next",t.arg=r),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var u=i.call(o,"catchLoc"),c=i.call(o,"finallyLoc");if(u&&c){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(u){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&i.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var a=n;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=e,o.arg=t,a?(this.method="next",this.next=a.finallyLoc,_):this.complete(o)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),_},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),O(r),_}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var i=n.arg;O(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:z(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=r),_}}}function b(e,t,r,n){var i=t&&t.prototype instanceof x?t:x,a=Object.create(i.prototype),o=new R(n||[]);return a._invoke=function(e,t,r){var n=l;return function(i,a){if(n===d)throw new Error("Generator is already running");if(n===v){if("throw"===i)throw a;return D()}for(r.method=i,r.arg=a;;){var o=r.delegate;if(o){var s=E(o,r);if(s){if(s===_)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===l)throw n=v,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=d;var u=w(e,t,r);if("normal"===u.type){if(n=r.done?v:f,u.arg===_)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=v,r.method="throw",r.arg=u.arg)}}}(e,r,o),a}function w(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}function x(){}function k(){}function C(){}function A(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function S(e){var t;this._invoke=function(r,n){function a(){return new Promise(function(t,a){!function t(r,n,a,o){var s=w(e[r],e,n);if("throw"!==s.type){var u=s.arg,c=u.value;return c&&"object"==typeof c&&i.call(c,"__await")?Promise.resolve(c.__await).then(function(e){t("next",e,a,o)},function(e){t("throw",e,a,o)}):Promise.resolve(c).then(function(e){u.value=e,a(u)},function(e){return t("throw",e,a,o)})}o(s.arg)}(r,n,t,a)})}return t=t?t.then(a,a):a()}}function E(e,t){var n=e.iterator[t.method];if(n===r){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=r,E(e,t),"throw"===t.method))return _;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return _}var i=w(n,e.iterator,t.arg);if("throw"===i.type)return t.method="throw",t.arg=i.arg,t.delegate=null,_;var a=i.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=r),t.delegate=null,_):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,_)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function R(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function z(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,a=function t(){for(;++n<e.length;)if(i.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=r,t.done=!0,t};return a.next=a}}return{next:D}}function D(){return{value:r,done:!0}}}(function(){return this||"object"==typeof self&&self}()||Function("return this")())},function(t,r){t.exports=e},function(e,r){e.exports=t},function(e,t){e.exports=r},function(e,t,r){"use strict";r.r(t);var n=r(2),i=r.n(n),a=r(1),o=r.n(a),s=r(0),u=r.n(s),c={drawPath:function(e,t,r,n){e&&e.length>1&&(t.strokeStyle=r,t.fillStyle=r,t.lineWidth=n,t.beginPath(),t.moveTo(e[0].x,e[0].y),e.slice(1).forEach(function(e){var r=e.x,n=e.y;return t.lineTo(r,n)}),t.closePath(),t.stroke())},drawImage:function(e,t,r,n){var i=n.getImageData(0,0,t,r),a=i.data,o=0|e.length,s=0|a.length;if(s/o!=4)return!1;for(;o--;){var u=e[o];a[--s]=255,a[--s]=u,a[--s]=u,a[--s]=u}return n.putImageData(i,0,0),!0}},h=function(){function e(t){i()(this,e),u()(this,"_canvas",void 0),u()(this,"_context",void 0),u()(this,"_config",void 0),u()(this,"_capacity",void 0),u()(this,"_capture",void 0),u()(this,"_results",void 0),this._results=new Array,this._config=t,this._capacity=t.capacity||20,this._capture=!0===t.capture,this._capture&&(this._canvas=document.createElement("canvas"),this._context=this._canvas.getContext("2d"))}return o()(e,[{key:"addResult",value:function(e,t,r,n){if(n&&this._capacity&&!this._contains(n)&&this._passesFilter(n)){var i={codeResult:n};this._capacity--,this._capture&&(this._canvas.width=t,this._canvas.height=r,c.drawImage(e,t,r,this._context),i.frame=this._canvas.toDataURL()),this._results.push(i)}}},{key:"getResults",value:function(){return this._results}},{key:"_contains",value:function(e){return this._config.blacklist&&this._config.blacklist.some(function(t){return Object.keys(t).every(function(r){return t[r]===e[r]})})}},{key:"_passesFilter",value:function(e){return"function"!=typeof this._config.filter||this._config.filter(e)}}]),e}(),l={},f=function(){function e(){i()(this,e)}return o()(e,null,[{key:"subscribe",value:function(e,t,r){var n;if("function"==typeof t)n={callback:t,async:r};else if(!(n=t).callback)throw"Callback was not specified on options";d(e).subscriptions.push(n)}},{key:"publish",value:function(e,t){var r=d(e),n=r.subscriptions;n.filter(function(e){return!!e.once}).forEach(function(e){return v(e,t)}),r.subscriptions=n.filter(function(e){return!e.once}),r.subscriptions.forEach(function(e){return v(e,t)})}},{key:"once",value:function(t,r,n){e.subscribe(t,{callback:r,async:n,once:!0})}},{key:"unsubscribe",value:function(e,t){if(e){var r=d(e);r.subscriptions=r&&t?r.subscriptions.filter(function(e){return e.callback!==t}):[]}else l={}}}]),e}();function d(e){return l[e]||(l[e]={subscriptions:[]}),l[e]}function v(e,t){e.async?setTimeout(function(){e.callback(t)},4):e.callback(t)}function _(e,t){var r=e[0],n=e[1],i=e[2],a=i*n,o=a*(1-Math.abs(r/60%2-1)),s=i-a,u=0,c=0,h=0;return r<60?(u=a,c=o):r<120?(u=o,c=a):r<180?(c=a,h=o):r<240?(c=o,h=a):r<300?(u=o,h=a):r<360&&(u=a,h=o),(t=t||[0,0,0])[0]=255*(u+s)|0,t[1]=255*(c+s)|0,t[2]=255*(h+s)|0,t}var p=function(){function e(t,r,n,a){i()(this,e),u()(this,"data",void 0),u()(this,"size",void 0),r?this.data=r:(this.data=new(n||Uint8Array)(t.x*t.y),a&&this.data.fill(0)),this.size=t}return o()(e,[{key:"inImageWithBorder",value:function(e,t){return e.x>=t&&e.y>=t&&e.x<this.size.x-t&&e.y<this.size.y-t}},{key:"subImageAsCopy",value:function(e,t,r){for(var n=e.size.y,i=e.size.x,a=0;a<i;a++)for(var o=0;o<n;o++)e.data[o*i+a]=this.data[(r+o)*this.size.x+t+a]}},{key:"get",value:function(e,t){return this.data[t*this.size.x+e]}},{key:"set",value:function(e,t,r){return this.data[t*this.size.x+e]=r,this}},{key:"zeroBorder",value:function(){for(var e=this.size.x,t=this.size.y,r=this.data,n=0;n<e;n++)r[n]=r[(t-1)*e+n]=0;for(var i=1;i<t-1;i++)r[i*e]=r[i*e+(e-1)]=0}},{key:"invert",value:function(){for(var e=this.data,t=e.length;t--;)e[t]=e[t]?0:1}},{key:"moments",value:function(e){var t=this.size.y,r=this.size.x,n=new Array,i=new Array;if(e<=0)return i;for(var a=0;a<e;a++)n[a]={m00:0,m01:0,m10:0,m11:0,m02:0,m20:0,theta:0,rad:0};for(var o=0;o<t;o++)for(var s=o*o,u=0;u<r;u++){var c=this.data[o*r+u];if(c>0){var h=n[c-1];h.m00+=1,h.m01+=o,h.m10+=u,h.m11+=u*o,h.m02+=s,h.m20+=u*u}}for(var l=Math.PI,f=l/4,d=0;d<e;d++){var v=n[d];if(!isNaN(v.m00)&&0!==v.m00){var _=v.m10/v.m00,p=v.m01/v.m00,g=v.m11/v.m00-_*p,y=v.m02/v.m00-p*p,m=v.m20/v.m00-_*_,b=.5*Math.atan((y-m)/(2*g))+(g>=0?f:-f)+l;v.theta=(180*b/l+90)%180-90,v.theta<0&&(v.theta+=180),v.rad=b>l?b-l:b,v.x=Math.cos(b),v.y=Math.sin(b),i.push(v)}}return i}},{key:"show",value:function(e,t){var r=this.size.y,n=this.size.x,i=e.getImageData(0,0,n,r),a=i.data,o=0;t||(t=1);for(var s=0;s<r;s++)for(var u=0;u<n;u++){var c=s*n+u;o=this.get(u,s)*t,a[4*c+0]=o,a[4*c+1]=o,a[4*c+2]=o,a[4*c+3]=255}e.putImageData(i,0,0)}},{key:"overlay",value:function(e,t,r,n){var i=[0,1,1],a=[255,255,255],o=[0,0,0],s=e.getImageData(r,n,this.size.x,this.size.y),u=s.data;(!t||t<0||t>360)&&(t=360);for(var c=this.data.length;c--;){i[0]=this.data[c]*t;var h=i[0]<=0?a:i[0]>=360?o:_(i);u[4*c+0]=h[0],u[4*c+1]=h[1],u[4*c+2]=h[2],u[4*c+3]=255}e.putImageData(s,r,n)}}]),e}(),g=r(8),y=r.n(g);function m(){for(var e=function(e){return e&&"object"===y()(e)},t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return r.reduce(function(t,r){return r&&Object.keys(r).forEach(function(n){var i=t[n],a=r[n];Array.isArray(i)&&Array.isArray(a)?t[n]=a:e(i)&&e(a)?t[n]=m(i,a):t[n]=a}),t},{})}var b,w={inputStream:{type:"ImageStream",sequence:!1,size:800,area:{top:"0%",right:"0%",left:"0%",bottom:"0%"},singleChannel:!1},locate:!0,numOfWorkers:0,decoder:{readers:["code_128_reader"]},locator:{halfSample:!0,patchSize:"medium"}},x=r(9),k=r.n(x),C=r(4),A=r.n(C),S=r(3),E=r.n(S),P=r(5),O=r.n(P);!function(e){e[e.Forward=1]="Forward",e[e.Reverse=-1]="Reverse"}(b||(b={}));var R=function(){function e(t,r){i()(this,e),u()(this,"_singleCodeError",void 0),u()(this,"_averageCodeError",void 0),u()(this,"_format",void 0),u()(this,"_row",void 0),u()(this,"config",void 0),u()(this,"supplements",void 0),this._format="unknown",this._row=[],this.config=t||{},this.supplements=r}return o()(e,[{key:"SINGLE_CODE_ERROR",get:function(){return this._singleCodeError}},{key:"AVERAGE_CODE_ERROR",get:function(){return this._averageCodeError}},{key:"FORMAT",get:function(){return this._format}}],[{key:"Exception",get:function(){return{StartNotFoundException:"Start-Info was not found!",CodeNotFoundException:"Code could not be found!",PatternNotFoundException:"Pattern could not be found!"}}}]),o()(e,[{key:"_findPattern",value:function(e,t,r,n){var i=new Array(e.length),a={error:Number.MAX_VALUE,code:-1,start:0,end:0},o=this.AVERAGE_CODE_ERROR,s=0;t||(t=this._nextSet(this._row)),i.fill(0);for(var u=t;u<this._row.length;u++)if(this._row[u]^r)i[s]++;else{if(s===i.length-1){var c=this._matchPattern(i,e);if(c<o)return a.error=c,a.start=u-i.reduce(function(e,t){return e+t},0),a.end=u,a;if(!n)return null;for(var h=0;h<i.length-2;h++)i[h]=i[h+2];i[i.length-2]=0,i[i.length-1]=0,s--}else s++;i[s]=1,r=r?0:1}return null}},{key:"_nextUnset",value:function(e,t){for(var r=t||0;r<e.length;r++)if(!e[r])return r;return e.length}},{key:"_nextSet",value:function(e,t){for(var r=t||0;r<e.length;r++)if(e[r])return r;return e.length}},{key:"_matchRange",value:function(e,t,r){for(var n=e<0?0:e;n<t;n++)if(this._row[n]!==r)return!1;return!0}},{key:"_matchPattern",value:function(e,t,r){var n=0,i=0,a=0;r=r||this.SINGLE_CODE_ERROR||1;for(var o=0;o<e.length;o++)i+=e[o],a+=t[o];if(i<a)return Number.MAX_VALUE;var s=i/a;r*=s;for(var u=0;u<e.length;u++){var c=e[u],h=t[u]*s,l=Math.abs(c-h)/h;if(l>r)return Number.MAX_VALUE;n+=l}return n/a}},{key:"_correctBars",value:function(e,t,r){for(var n=r.length,i=0;n--;)(i=e[r[n]]*(1-(1-t)/2))>1&&(e[r[n]]=i)}},{key:"decodePattern",value:function(e){this._row=e;var t=this.decode();return null===t?(this._row.reverse(),(t=this.decode())&&(t.direction=b.Reverse,t.start=this._row.length-t.start,t.end=this._row.length-t.end)):t.direction=b.Forward,t&&(t.format=this.FORMAT),t}},{key:"_fillCounters",value:function(e,t,r){var n=new Array,i=0;n[i]=0;for(var a=e;a<t;a++)this._row[a]^r?n[i]++:(n[++i]=1,r=r?0:1);return n}},{key:"_toCounters",value:function(e,t){var r=t.length,n=this._row.length,i=this._row[e]?0:1,a=0;t.fill(0);for(var o=e;o<n;o++)if(this._row[o]^i)t[a]++;else{if(++a===r)break;t[a]=1,i=i?0:1}return t}}]),e}(),z=[[2,1,2,2,2,2],[2,2,2,1,2,2],[2,2,2,2,2,1],[1,2,1,2,2,3],[1,2,1,3,2,2],[1,3,1,2,2,2],[1,2,2,2,1,3],[1,2,2,3,1,2],[1,3,2,2,1,2],[2,2,1,2,1,3],[2,2,1,3,1,2],[2,3,1,2,1,2],[1,1,2,2,3,2],[1,2,2,1,3,2],[1,2,2,2,3,1],[1,1,3,2,2,2],[1,2,3,1,2,2],[1,2,3,2,2,1],[2,2,3,2,1,1],[2,2,1,1,3,2],[2,2,1,2,3,1],[2,1,3,2,1,2],[2,2,3,1,1,2],[3,1,2,1,3,1],[3,1,1,2,2,2],[3,2,1,1,2,2],[3,2,1,2,2,1],[3,1,2,2,1,2],[3,2,2,1,1,2],[3,2,2,2,1,1],[2,1,2,1,2,3],[2,1,2,3,2,1],[2,3,2,1,2,1],[1,1,1,3,2,3],[1,3,1,1,2,3],[1,3,1,3,2,1],[1,1,2,3,1,3],[1,3,2,1,1,3],[1,3,2,3,1,1],[2,1,1,3,1,3],[2,3,1,1,1,3],[2,3,1,3,1,1],[1,1,2,1,3,3],[1,1,2,3,3,1],[1,3,2,1,3,1],[1,1,3,1,2,3],[1,1,3,3,2,1],[1,3,3,1,2,1],[3,1,3,1,2,1],[2,1,1,3,3,1],[2,3,1,1,3,1],[2,1,3,1,1,3],[2,1,3,3,1,1],[2,1,3,1,3,1],[3,1,1,1,2,3],[3,1,1,3,2,1],[3,3,1,1,2,1],[3,1,2,1,1,3],[3,1,2,3,1,1],[3,3,2,1,1,1],[3,1,4,1,1,1],[2,2,1,4,1,1],[4,3,1,1,1,1],[1,1,1,2,2,4],[1,1,1,4,2,2],[1,2,1,1,2,4],[1,2,1,4,2,1],[1,4,1,1,2,2],[1,4,1,2,2,1],[1,1,2,2,1,4],[1,1,2,4,1,2],[1,2,2,1,1,4],[1,2,2,4,1,1],[1,4,2,1,1,2],[1,4,2,2,1,1],[2,4,1,2,1,1],[2,2,1,1,1,4],[4,1,3,1,1,1],[2,4,1,1,1,2],[1,3,4,1,1,1],[1,1,1,2,4,2],[1,2,1,1,4,2],[1,2,1,2,4,1],[1,1,4,2,1,2],[1,2,4,1,1,2],[1,2,4,2,1,1],[4,1,1,2,1,2],[4,2,1,1,1,2],[4,2,1,2,1,1],[2,1,2,1,4,1],[2,1,4,1,2,1],[4,1,2,1,2,1],[1,1,1,1,4,3],[1,1,1,3,4,1],[1,3,1,1,4,1],[1,1,4,1,1,3],[1,1,4,3,1,1],[4,1,1,1,1,3],[4,1,1,3,1,1],[1,1,3,1,4,1],[1,1,4,1,3,1],[3,1,1,1,4,1],[4,1,1,1,3,1],[2,1,1,4,1,2],[2,1,1,2,1,4],[2,1,1,2,3,2],[2,3,3,1,1,1,2]],D=[0,2,4],I=[1,3,5],W=function(e){function t(){var e;return i()(this,t),(e=A()(this,E()(t).call(this)))._format="code_128",e._singleCodeError=.64,e._averageCodeError=.3,e}return O()(t,e),o()(t,[{key:"_decodeCode",value:function(e,t){for(var r=[0,0,0,0,0,0],n=e,i={error:Number.MAX_VALUE,code:-1,start:e,end:e,correction:{bar:1,space:1}},a=this.AVERAGE_CODE_ERROR,o=this._row[n]?0:1,s=0,u=n;u<this._row.length;u++)if(this._row[u]^o)r[s]++;else{if(s===r.length-1){t&&this._correct(r,t);for(var c=0;c<z.length;c++){var h=this._matchPattern(r,z[c]);h<i.error&&(i.code=c,i.error=h)}if(i.end=u,-1===i.code||i.error>a)return null;var l=z[i.code];return l&&(i.correction.bar=this._calculateCorrection(l,r,D),i.correction.space=this._calculateCorrection(l,r,I)),i}r[++s]=1,o=o?0:1}return null}},{key:"_correct",value:function(e,t){this._correctBars(e,t.bar,D),this._correctBars(e,t.space,I)}},{key:"_findStart",value:function(){for(var e,t=[0,0,0,0,0,0],r=this._nextSet(this._row),n={error:Number.MAX_VALUE,code:-1,start:0,end:0,correction:{bar:1,space:1}},i=this.AVERAGE_CODE_ERROR,a=0,o=0,s=r;s<this._row.length;s++)if(this._row[s]^a)t[o]++;else{if(o===t.length-1){e=0;for(var u=0;u<t.length;u++)e+=t[u];for(var c=103;c<=105;c++){var h=this._matchPattern(t,z[c]);h<n.error&&(n.code=c,n.error=h)}if(n.error<i)return n.start=s-e,n.end=s,n.correction.bar=this._calculateCorrection(z[n.code],t,D),n.correction.space=this._calculateCorrection(z[n.code],t,I),n;for(var l=0;l<4;l++)t[l]=t[l+2];t[4]=0,t[5]=0,o--}else o++;t[o]=1,a=a?0:1}return null}},{key:"decode",value:function(){var e,t,r=new Array,n=this._findStart(),i=null,a=!1,o=0,s=0,u=new Array,c=new Array,h=!1,l=!0;if(null===n)return null;switch(i={code:n.code,start:n.start,end:n.end,correction:{bar:n.correction.bar,space:n.correction.space}},c.push(i),s=i.code,i.code){case 103:e=101;break;case 104:e=100;break;case 105:e=99;break;default:return null}for(;!a;){if(t=h,h=!1,null!==(i=this._decodeCode(i.end,i.correction)))switch(106!==i.code&&(l=!0),106!==i.code&&(u.push(i.code),s+=++o*i.code),c.push(i),e){case 101:if(i.code<64)r.push(String.fromCharCode(32+i.code));else if(i.code<96)r.push(String.fromCharCode(i.code-64));else switch(106!==i.code&&(l=!1),i.code){case 98:h=!0,e=100;break;case 100:e=100;break;case 99:e=99;break;case 106:a=!0}break;case 100:if(i.code<96)r.push(String.fromCharCode(32+i.code));else switch(106!==i.code&&(l=!1),i.code){case 98:h=!0,e=101;break;case 101:e=101;break;case 99:e=99;break;case 106:a=!0}break;case 99:if(i.code<100)r.push(i.code<10?"0"+i.code:i.code);else switch(106!==i.code&&(l=!1),i.code){case 101:e=101;break;case 100:e=100;break;case 106:a=!0}}else a=!0;t&&(e=101===e?100:101)}return null===i?null:(i.end=this._nextUnset(this._row,i.end),this._verifyTrailingWhitespace(i)?(s-=o*u[u.length-1])%103!==u[u.length-1]?null:r.length?(l&&r.splice(r.length-1,1),{code:r.join(""),start:n.start,end:i.end,codeset:e,startInfo:n,decodedCodes:c,endInfo:i}):null:null)}},{key:"_verifyTrailingWhitespace",value:function(e){var t=e.end+(e.end-e.start)/2;return t<this._row.length&&this._matchRange(e.end,t,0)?e:null}},{key:"_calculateCorrection",value:function(e,t,r){for(var n=0,i=0,a=r.length;a--;)i+=e[r[a]],n+=t[r[a]];return i/n}}]),t}(R),L=new Uint16Array(k()("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. *$/+%").map(function(e){return e.charCodeAt(0)})),T=new Uint16Array([52,289,97,352,49,304,112,37,292,100,265,73,328,25,280,88,13,268,76,28,259,67,322,19,274,82,7,262,70,22,385,193,448,145,400,208,133,388,196,148,168,162,138,42]),j=function(e){function t(){var e;return i()(this,t),(e=A()(this,E()(t).call(this)))._format="code_39",e}return O()(t,e),o()(t,[{key:"decode",value:function(){var e=this._findStart();if(!e)return null;var t,r,n=new Array,i=new Uint16Array(9),a=this._nextSet(this._row,e.end);do{this._toCounters(a,i);var o=this._toPattern(i);if(o<0)return null;if(null===(t=this._patternToChar(o)))return null;n.push(t),r=a,a+=i.reduce(function(e,t){return e+t},0),a=this._nextSet(this._row,a)}while("*"!==t);return n.pop(),n.length&&this._verifyTrailingWhitespace(r,a,i)?{code:n.join(""),start:e.start,end:a,startInfo:e,decodedCodes:n}:null}},{key:"_patternToChar",value:function(e){for(var t=0;t<T.length;t++)if(T[t]===e)return String.fromCharCode(L[t]);return null}},{key:"_verifyTrailingWhitespace",value:function(e,t,r){var n=r.reduce(function(e,t){return e+t},0);return 3*(t-e-n)>=n}},{key:"_findNextWidth",value:function(e,t){for(var r=Number.MAX_VALUE,n=0;n<e.length;n++)e[n]<r&&e[n]>t&&(r=e[n]);return r}},{key:"_toPattern",value:function(e){for(var t,r=e.length,n=0,i=r,a=0;i>3;){n=this._findNextWidth(e,n),i=0,t=0;for(var o=0;o<r;o++)e[o]>n&&(t|=1<<r-1-o,i++,a+=e[o]);if(3===i){for(var s=0;s<r&&i>0;s++)if(e[s]>n&&(i--,2*e[s]>=a))return-1;return t}}return-1}},{key:"_findStart",value:function(){for(var e,t=this._nextSet(this._row),r=t,n=new Uint16Array(9),i=0,a=0,o=t;o<this._row.length;o++)if(this._row[o]^a)n[i]++;else{if(i===n.length-1){if(148===this._toPattern(n)&&(e=0|Math.max(0,r-(o-r)/4),this._matchRange(e,r,0)))return{start:r,end:o};r+=n[0]+n[1];for(var s=0;s<7;s++)n[s]=n[s+2];n[7]=0,n[8]=0,i--}else i++;n[i]=1,a=a?0:1}return null}}]),t}(R),M=r(7),G=r.n(M),U=function(e){function t(){var e;return i()(this,t),(e=A()(this,E()(t).call(this)))._format="code_39_vin",e}return O()(t,e),o()(t,[{key:"decode",value:function(){var e=G()(E()(t.prototype),"decode",this).call(this);if(!e)return null;var r=e.code;return r?(r=r.replace(/[IOQ]/g,""),/[A-Z0-9]{17}/.test(r)&&this._checkChecksum(r)?(e.code=r,e):null):null}},{key:"_checkChecksum",value:function(e){return!!e}}]),t}(j),N=r(6),H=r.n(N),B=k()("0123456789-$:/.+ABCD").map(function(e){return e.charCodeAt(0)}),F=[3,6,9,96,18,66,33,36,48,72,12,24,69,81,84,21,26,41,11,14],V=[26,41,11,14],q=function(e){function t(){var e;return i()(this,t),e=A()(this,E()(t).call(this)),u()(H()(e),"_counters",void 0),e._format="codabar",e._counters=[],e}return O()(t,e),o()(t,[{key:"decode",value:function(){this._counters=this._fillCounters(this._nextUnset(this._row),this._row.length,1);var e=this._findStart();if(!e)return null;var t,r=new Array,n=e.startCounter;do{if((t=this._toPattern(n))<0)return null;var i=this._patternToChar(t);if(null===i)return null;if(r.push(i),n+=8,r.length>1&&V.some(function(e){return e===t}))break}while(n<this._counters.length);if(r.length-2<4||!V.some(function(e){return e===t}))return null;if(!this._verifyWhitespace(e.startCounter,n-8))return null;if(!this._validateResult(r,e.startCounter))return null;n=n>this._counters.length?this._counters.length:n;var a=e.start+this._sumCounters(e.startCounter,n-8);return{code:r.join(""),start:e.start,end:a,startInfo:e,decodedCodes:r}}},{key:"_verifyWhitespace",value:function(e,t){return(e-1<=0||this._counters[e-1]>=this._calculatePatternLength(e)/2)&&(t+8>=this._counters.length||this._counters[t+7]>=this._calculatePatternLength(t)/2)}},{key:"_calculatePatternLength",value:function(e){for(var t=0,r=e;r<e+7;r++)t+=this._counters[r];return t}},{key:"_thresholdResultPattern",value:function(e,t){for(var r={space:{narrow:{size:0,counts:0,min:0,max:Number.MAX_VALUE},wide:{size:0,counts:0,min:0,max:Number.MAX_VALUE}},bar:{narrow:{size:0,counts:0,min:0,max:Number.MAX_VALUE},wide:{size:0,counts:0,min:0,max:Number.MAX_VALUE}}},n=t,i=0;i<e.length;i++){for(var a=this._charToPattern(e[i]),o=6;o>=0;o--){var s=2==(1&o)?r.bar:r.space,u=1==(1&a)?s.wide:s.narrow;u.size+=this._counters[n+o],u.counts++,a>>=1}n+=8}return["space","bar"].forEach(function(e){var t=r[e];t.wide.min=Math.floor((t.narrow.size/t.narrow.counts+t.wide.size/t.wide.counts)/2),t.narrow.max=Math.ceil(t.wide.min),t.wide.max=Math.ceil((2*t.wide.size+1.5)/t.wide.counts)}),r}},{key:"_charToPattern",value:function(e){for(var t=e.charCodeAt(0),r=0;r<B.length;r++)if(B[r]===t)return F[r];return 0}},{key:"_validateResult",value:function(e,t){for(var r=this._thresholdResultPattern(e,t),n=t,i=0;i<e.length;i++){for(var a=this._charToPattern(e[i]),o=6;o>=0;o--){var s=0==(1&o)?r.bar:r.space,u=1==(1&a)?s.wide:s.narrow,c=this._counters[n+o];if(c<u.min||c>u.max)return!1;a>>=1}n+=8}return!0}},{key:"_patternToChar",value:function(e){for(var t=0;t<F.length;t++)if(F[t]===e)return String.fromCharCode(B[t]);return null}},{key:"_computeAlternatingThreshold",value:function(e,t){for(var r=Number.MAX_VALUE,n=0,i=e;i<t;i+=2){var a=this._counters[i];a>n&&(n=a),a<r&&(r=a)}return(r+n)/2|0}},{key:"_toPattern",value:function(e){var t=e+7;if(t>this._counters.length)return-1;for(var r=this._computeAlternatingThreshold(e,t),n=this._computeAlternatingThreshold(e+1,t),i=64,a=0,o=0;o<7;o++){var s=0==(1&o)?r:n;this._counters[e+o]>s&&(a|=i),i>>=1}return a}},{key:"_sumCounters",value:function(e,t){for(var r=0,n=e;n<t;n++)r+=this._counters[n];return r}},{key:"_findStart",value:function(){for(var e=this,t=this._nextUnset(this._row),r=function(r){var n=e._toPattern(r);if(-1!==n&&V.some(function(e){return e===n})){var i=(t+=e._sumCounters(0,r))+e._sumCounters(r,r+8);return{v:{start:t,end:i,startCounter:r,endCounter:r+8}}}},n=1;n<this._counters.length;n++){var i=r(n);if("object"===y()(i))return i.v}return null}}]),t}(R);function X(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}var Y,Q=[1,1,2],Z=[[3,2,1,1],[2,2,2,1],[2,1,2,2],[1,4,1,1],[1,1,3,2],[1,2,3,1],[1,1,1,4],[1,3,1,2],[1,2,1,3],[3,1,1,2],[1,1,2,3],[1,2,2,2],[2,2,1,2],[1,1,4,1],[2,3,1,1],[1,3,2,1],[4,1,1,1],[2,1,3,1],[3,1,2,1],[2,1,1,3]],K=[0,11,13,14,19,25,28,21,22,26],J=function(e){function t(e,r){var n;return i()(this,t),(n=A()(this,E()(t).call(this,m({supplements:[]},e),r)))._format="ean_13",n._singleCodeError=.7,n._averageCodeError=.48,n}return O()(t,e),o()(t,[{key:"CODE_L_START",get:function(){return 0}},{key:"CODE_G_START",get:function(){return 10}},{key:"START_PATTERN",get:function(){return[1,1,1]}},{key:"STOP_PATTERN",get:function(){return[1,1,1]}},{key:"MIDDLE_PATTERN",get:function(){return[1,1,1,1,1]}}]),o()(t,[{key:"_decodeCode",value:function(e,t){var r=[0,0,0,0],n=e,i={error:Number.MAX_VALUE,code:-1,start:e,end:e},a=this.AVERAGE_CODE_ERROR,o=this._row[n]?0:1,s=0;t||(t=Z.length);for(var u=n;u<this._row.length;u++)if(this._row[u]^o)r[s]++;else{if(s===r.length-1){for(var c=0;c<t;c++){var h=this._matchPattern(r,Z[c]);h<i.error&&(i.code=c,i.error=h)}return i.end=u,i.error>a?null:i}r[++s]=1,o=o?0:1}return null}},{key:"_findStart",value:function(){for(var e,t=this._nextSet(this._row);!e;){if(!(e=this._findPattern(this.START_PATTERN,t,0,!0)))return null;var r=e.start-(e.end-e.start);if(r>=0&&this._matchRange(r,e.start,0))return e;t=e.end,e=null}return null}},{key:"_verifyTrailingWhitespace",value:function(e){var t=e.end+(e.end-e.start);return t<this._row.length&&this._matchRange(e.end,t,0)?e:null}},{key:"_findEnd",value:function(e,t){var r=this._findPattern(this.STOP_PATTERN,e,t,!1);return null!==r?this._verifyTrailingWhitespace(r):null}},{key:"_calculateFirstDigit",value:function(e){for(var t=0;t<K.length;t++)if(e===K[t])return t;return null}},{key:"_decodePayload",value:function(e,t,r){for(var n=0,i=0;i<6;i++){if(!(e=this._decodeCode(e.end)))return null;e.code>=this.CODE_G_START?(e.code-=this.CODE_G_START,n|=1<<5-i):n|=0<<5-i,t.push(e.code),r.push(e)}var a=this._calculateFirstDigit(n);if(null===a)return null;if(t.unshift(a),null===(e=this._findPattern(this.MIDDLE_PATTERN,e.end,1,!1)))return null;r.push(e);for(var o=0;o<6;o++){if(!(e=this._decodeCode(e.end,this.CODE_G_START)))return null;r.push(e),t.push(e.code)}return e}},{key:"decode",value:function(){var e=new Array,t=new Array,r={},n=this._findStart();if(!n)return null;var i={code:n.code,start:n.start,end:n.end};if(t.push(i),!(i=this._decodePayload(i,e,t)))return null;if(!(i=this._findEnd(i.end,0)))return null;if(t.push(i),!this._checksum(e))return null;if(this.supplements.length>0){var a=this._decodeExtensions(i.end);if(!a)return null;var o=a.decodedCodes[a.decodedCodes.length-1],s={start:o.start+((o.end-o.start)/2|0),end:o.end};if(!this._verifyTrailingWhitespace(s))return null;r={supplement:a,code:e.join("")+a.code}}return function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?X(r,!0).forEach(function(t){u()(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):X(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}({code:e.join(""),start:n.start,end:i.end,startInfo:n,decodedCodes:t},r)}},{key:"_decodeExtensions",value:function(e){var t=this._nextSet(this._row,e),r=this._findPattern(Q,t,0,!1);if(null===r)return null;for(var n=0;n<this.supplements.length;n++){var i=this.supplements[n].decode(this._row,r.end);if(null!==i)return{code:i.code,start:t,startInfo:r,end:i.end,decodedCodes:i.decodedCodes}}return null}},{key:"_checksum",value:function(e){for(var t=0,r=e.length-2;r>=0;r-=2)t+=e[r];t*=3;for(var n=e.length-1;n>=0;n-=2)t+=e[n];return t%10==0}}]),t}(R),$=function(e){function t(e,r){var n;return i()(this,t),(n=A()(this,E()(t).call(this,e,r)))._format="ean_8",n}return O()(t,e),o()(t,[{key:"_decodePayload",value:function(e,t,r){for(var n=0;n<4;n++){if(!(e=this._decodeCode(e.end,this.CODE_G_START)))return null;t.push(e.code),r.push(e)}if(null===(e=this._findPattern(this.MIDDLE_PATTERN,e.end,1,!1)))return null;r.push(e);for(var i=0;i<4;i++){if(!(e=this._decodeCode(e.end,this.CODE_G_START)))return null;r.push(e),t.push(e.code)}return e}}]),t}(J),ee=function(e){function t(e,r){var n;return i()(this,t),(n=A()(this,E()(t).call(this,e,r)))._format="ean_2",n}return O()(t,e),o()(t,[{key:"decode",value:function(e,t){var r,n=e.length,i=new Array,a=new Array,o=t,s=0;this._row=e;for(var u=0;u<2&&o<n;u++){if(!(r=this._decodeCode(o)))return null;a.push(r),i.push(r.code%10),r.code>=this.CODE_G_START&&(s|=1<<1-u),1!==u&&(o=this._nextSet(this._row,r.end),o=this._nextUnset(this._row,o))}return 2!==i.length||parseInt(i.join(""))%4!==s?null:{code:i.join(""),decodedCodes:a,end:r.end}}}]),t}(J),te=function(e){function t(e,r){var n;return i()(this,t),(n=A()(this,E()(t).call(this,e,r)))._format="ean_5",n}return O()(t,e),o()(t,[{key:"CHECK_DIGIT_ENCODINGS",get:function(){return[24,20,18,17,12,6,3,10,9,5]}}]),o()(t,[{key:"decode",value:function(e,t){var r,n=e.length,i=new Array,a=new Array,o=0,s=t;this._row=e;for(var u=0;u<5&&s<n;u++){if(!(r=this._decodeCode(s)))return null;a.push(r),i.push(r.code%10),r.code>=this.CODE_G_START&&(o|=1<<4-u),4!==u&&(s=this._nextSet(this._row,r.end),s=this._nextUnset(this._row,s))}return 5!==i.length?null:this._extensionChecksum(i)!==this._determineCheckDigit(o)?null:{code:i.join(""),decodedCodes:a,end:r.end}}},{key:"_determineCheckDigit",value:function(e){for(var t=0;t<10;t++)if(e===this.CHECK_DIGIT_ENCODINGS[t])return t;return null}},{key:"_extensionChecksum",value:function(e){for(var t=e.length,r=0,n=t-2;n>=0;n-=2)r+=e[n];r*=3;for(var i=t-1;i>=0;i-=2)r+=e[i];return(r*=3)%10}}]),t}(J),re=function(e){function t(e,r){var n;return i()(this,t),(n=A()(this,E()(t).call(this,e,r)))._format="upc_a",n}return O()(t,e),o()(t,[{key:"decode",value:function(){var e=G()(E()(t.prototype),"decode",this).call(this);return e&&e.code&&13===e.code.length&&"0"===e.code.charAt(0)?(e.code=e.code.substring(1),e):null}}]),t}(J),ne=[[56,52,50,49,44,38,35,42,41,37],[7,11,13,14,19,25,28,21,22,26]],ie=function(e){function t(e,r){var n;return i()(this,t),(n=A()(this,E()(t).call(this,e,r)))._format="upc_e",n}return O()(t,e),o()(t,[{key:"STOP_PATTERN",get:function(){return[1/6*7,1/6*7,1/6*7,1/6*7,1/6*7,1/6*7]}}]),o()(t,[{key:"_decodePayload",value:function(e,t,r){for(var n=0,i=0;i<6;i++){if(!(e=this._decodeCode(e.end)))return null;e.code>=this.CODE_G_START&&(e.code=e.code-this.CODE_G_START,n|=1<<5-i),t.push(e.code),r.push(e)}return this._determineParity(n,t)?e:null}},{key:"_determineParity",value:function(e,t){for(var r=0;r<ne.length;r++)for(var n=0;n<ne[r].length;n++)if(e===ne[r][n])return t.unshift(r),t.push(n),!0;return!1}},{key:"_convertToUPCA",value:function(e){var t=e[e.length-2],r=[e[0]];return(r=t<=2?r.concat(e.slice(1,3)).concat([t,0,0,0,0]).concat(e.slice(3,6)):3===t?r.concat(e.slice(1,4)).concat([0,0,0,0,0]).concat(e.slice(4,6)):4===t?r.concat(e.slice(1,5)).concat([0,0,0,0,0,e[5]]):r.concat(e.slice(1,6)).concat([0,0,0,0,t])).push(e[e.length-1]),r}},{key:"_checksum",value:function(e){return G()(E()(t.prototype),"_checksum",this).call(this,this._convertToUPCA(e))}},{key:"_findEnd",value:function(e,r){return 1,G()(E()(t.prototype),"_findEnd",this).call(this,e,1)}},{key:"_verifyTrailingWhitespace",value:function(e){var t=e.end+(e.end-e.start)/2;return t<this._row.length&&this._matchRange(e.end,t,0)?e:null}}]),t}(J),ae=[1,1,1,1],oe=[1,1,3],se=[[1,1,3,3,1],[3,1,1,1,3],[1,3,1,1,3],[3,3,1,1,1],[1,1,3,1,3],[3,1,3,1,1],[1,3,3,1,1],[1,1,1,3,3],[3,1,1,3,1],[1,3,1,3,1]],ue=function(e){function t(e){var r;return i()(this,t),r=A()(this,E()(t).call(this,m({normalizeBarSpaceWidth:!1},e))),u()(H()(r),"_barSpaceRatio",void 0),r._barSpaceRatio=[1,1],r._format="i2of5",r.config.normalizeBarSpaceWidth?(r._singleCodeError=.38,r._averageCodeError=.09):(r._singleCodeError=.78,r._averageCodeError=.38),r}return O()(t,e),o()(t,[{key:"decode",value:function(){var e=this._findStart();if(!e)return null;var t=this._findEnd();if(!t)return null;var r=this._fillCounters(e.end,t.start,0);if(r.length%10!=0)return null;var n=new Array,i=new Array;return i.push(e),!this._decodePayload(r,n,i)||n.length%2!=0||n.length<6?null:(i.push(t),{code:n.join(""),start:e.start,end:t.end,startInfo:e,decodedCodes:i})}},{key:"_matchPattern",value:function(e,r){if(this.config.normalizeBarSpaceWidth){for(var n=[0,0],i=[0,0],a=[0,0],o=0;o<e.length;o++)n[o%2]+=e[o],i[o%2]+=r[o];a[0]=i[0]/n[0],a[1]=i[1]/n[1],a[0]=Math.max(Math.min(a[0],5),.2),a[1]=Math.max(Math.min(a[1],5),.2),this._barSpaceRatio=a;for(var s=0;s<e.length;s++)e[s]*=this._barSpaceRatio[s%2]}return G()(E()(t.prototype),"_matchPattern",this).call(this,e,r)}},{key:"_findStart",value:function(){for(var e,t=this._nextSet(this._row);!e;){if(!(e=this._findPattern(ae,t,0,!0)))return null;var r=e.end-e.start>>2,n=e.start-10*r;if(n>=0&&this._matchRange(n,e.start,0))return e;t=e.end,e=null}return null}},{key:"_verifyTrailingWhitespace",value:function(e){var t=e.end+(e.end-e.start)/2;return t<this._row.length&&this._matchRange(e.end,t,0)?e:null}},{key:"_findEnd",value:function(){this._row.reverse();var e=this._findPattern(oe,void 0,0,!1);if(this._row.reverse(),null===e)return null;var t=e.start;return e.start=this._row.length-e.end,e.end=this._row.length-t,null!==e?this._verifyTrailingWhitespace(e):null}},{key:"_decodeCode",value:function(e){for(var t={error:Number.MAX_VALUE,code:-1,start:0,end:0},r=0;r<se.length;r++){var n=this._matchPattern(e,se[r]);n<t.error&&(t.code=r,t.error=n)}return t.error<this.AVERAGE_CODE_ERROR?t:null}},{key:"_decodePayload",value:function(e,t,r){for(var n,i,a=e.length,o=[0,0,0,0,0],s=[0,0,0,0,0],u=0;u<a;){for(var c=0;c<5;c++)o[c]=e[u]*this._barSpaceRatio[0],s[c]=e[u+1]*this._barSpaceRatio[1],u+=2;if(!(n=this._decodeCode(o)))return null;if(!(i=this._decodeCode(s)))return null;t.push(n.code,i.code),r.push(n,i)}return[n,i]}}]),t}(R),ce=[3,1,3,1,1,1],he=[3,1,1,1,3],le=[[1,1,3,3,1],[3,1,1,1,3],[1,3,1,1,3],[3,3,1,1,1],[1,1,3,1,3],[3,1,3,1,1],[1,3,3,1,1],[1,1,1,3,3],[3,1,1,3,1],[1,3,1,3,1]],fe=ce.reduce(function(e,t){return e+t},0),de=function(e){function t(e){var r;return i()(this,t),r=A()(this,E()(t).call(this,e)),u()(H()(r),"_barSpaceRatio",void 0),r._barSpaceRatio=[1,1],r._format="2of5",r._singleCodeError=.78,r._averageCodeError=.3,r}return O()(t,e),o()(t,[{key:"decode",value:function(){var e=this._findStart();if(!e)return null;var t=this._findEnd();if(!t)return null;var r=this._fillCounters(e.end,t.start,0);if(r.length%10!=0)return null;var n=new Array,i=new Array;return i.push(e),!this._decodePayload(r,n,i)||n.length<5?null:(i.push(t),{code:n.join(""),start:e.start,end:t.end,startInfo:e,decodedCodes:i})}},{key:"_findStart",value:function(){for(var e,t=this._nextSet(this._row),r=1;!e;){if(!(e=this._findPattern(ce,t,0,!0)))return null;r=(e.end-e.start)/fe|0;var n=e.start-5*r;if(n>=0&&this._matchRange(n,e.start,0))return e;t=e.end,e=null}return null}},{key:"_verifyTrailingWhitespace",value:function(e){var t=e.end+(e.end-e.start)/2;return t<this._row.length&&this._matchRange(e.end,t,0)?e:null}},{key:"_findEnd",value:function(){this._row.reverse();var e=this._nextSet(this._row),t=this._findPattern(he,e,0,!0);if(this._row.reverse(),null===t)return null;var r=t.start;return t.start=this._row.length-t.end,t.end=this._row.length-r,null!==t?this._verifyTrailingWhitespace(t):null}},{key:"_decodeCode",value:function(e){for(var t={error:Number.MAX_VALUE,code:-1,start:0,end:0},r=0;r<le.length;r++){var n=this._matchPattern(e,le[r]);n<t.error&&(t.code=r,t.error=n)}return t.error<this.AVERAGE_CODE_ERROR?t:null}},{key:"_decodePayload",value:function(e,t,r){for(var n,i=e.length,a=[0,0,0,0,0],o=0;o<i;){for(var s=0;s<5;s++)a[s]=e[o]*this._barSpaceRatio[0],o+=2;if(!(n=this._decodeCode(a)))return null;t.push(n.code),r.push(n)}return n}}]),t}(R),ve=new Uint16Array(k()("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%abcd*").map(function(e){return e.charCodeAt(0)})),_e=new Uint16Array([276,328,324,322,296,292,290,336,274,266,424,420,418,404,402,394,360,356,354,308,282,344,332,326,300,278,436,434,428,422,406,410,364,358,310,314,302,468,466,458,366,374,430,294,474,470,306,350]),pe={code_128_reader:W,ean_reader:J,ean_5_reader:te,ean_2_reader:ee,ean_8_reader:$,code_39_reader:j,code_39_vin_reader:U,codabar_reader:q,upc_reader:re,upc_e_reader:ie,i2of5_reader:ue,"2of5_reader":de,code_93_reader:function(e){function t(){var e;return i()(this,t),(e=A()(this,E()(t).call(this)))._format="code_93",e}return O()(t,e),o()(t,[{key:"decode",value:function(){var e=this._findStart();if(!e)return null;var t,r,n=new Array,i=new Uint16Array(6),a=this._nextSet(this._row,e.end);do{this._toCounters(a,i);var o=this._toPattern(i);if(o<0)return null;if(null===(t=this._patternToChar(o)))return null;n.push(t),r=a,a+=i.reduce(function(e,t){return e+t},0),a=this._nextSet(this._row,a)}while("*"!==t);return n.pop(),n.length&&this._verifyEnd(r,a)&&this._verifyChecksums(n)?(n=n.slice(0,n.length-2),null===(n=this._decodeExtended(n))?null:{code:n.join(""),start:e.start,end:a,startInfo:e,decodedCodes:n}):null}},{key:"_patternToChar",value:function(e){for(var t=0;t<_e.length;t++)if(_e[t]===e)return String.fromCharCode(ve[t]);return null}},{key:"_verifyEnd",value:function(e,t){return!(e===t||!this._row[t])}},{key:"_toPattern",value:function(e){for(var t=e.length,r=0,n=0,i=0;i<t;i++)n+=e[i];for(var a=0;a<t;a++){var o=Math.round(9*e[a]/n);if(o<1||o>4)return-1;if(0==(1&a))for(var s=0;s<o;s++)r=r<<1|1;else r<<=o}return r}},{key:"_findStart",value:function(){for(var e,t=new Uint16Array(6),r=this._nextSet(this._row),n=r,i=0,a=0,o=r;o<this._row.length;o++)if(this._row[o]^a)t[i]++;else{if(i===t.length-1){if(350===this._toPattern(t)&&(e=0|Math.max(0,n-(o-n)/4),this._matchRange(e,n,0)))return{start:n,end:o};n+=t[0]+t[1];for(var s=0;s<4;s++)t[s]=t[s+2];t[4]=0,t[5]=0,i--}else i++;t[i]=1,a=a?0:1}return null}},{key:"_decodeExtended",value:function(e){for(var t=e.length,r=new Array,n=0;n<t;n++){var i=e[n];if(i>="a"&&i<="d"){if(n>t-2)return null;var a=e[++n],o=a.charCodeAt(0),s=void 0;switch(i){case"a":if(!(a>="A"&&a<="Z"))return null;s=String.fromCharCode(o-64);break;case"b":if(a>="A"&&a<="E")s=String.fromCharCode(o-38);else if(a>="F"&&a<="J")s=String.fromCharCode(o-11);else if(a>="K"&&a<="O")s=String.fromCharCode(o+16);else if(a>="P"&&a<="S")s=String.fromCharCode(o+43);else{if(!(a>="T"&&a<="Z"))return null;s=String.fromCharCode(127)}break;case"c":if(a>="A"&&a<="O")s=String.fromCharCode(o-32);else{if("Z"!==a)return null;s=":"}break;case"d":if(!(a>="A"&&a<="Z"))return null;s=String.fromCharCode(o+32)}r.push(s)}else r.push(i)}return r}},{key:"_verifyChecksums",value:function(e){return this._matchCheckChar(e,e.length-2,20)&&this._matchCheckChar(e,e.length-1,15)}},{key:"_matchCheckChar",value:function(e,t,r){var n=e.slice(0,t),i=n.length,a=n.reduce(function(e,t,n){return e+((-1*n+(i-1))%r+1)*ve.indexOf(t.charCodeAt(0))},0);return ve[a%47]===e[t].charCodeAt(0)}}]),t}(R)};function ge(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}!function(e){e[e.Up=1]="Up",e[e.Down=-1]="Down"}(Y||(Y={}));var ye,me=function(){function e(){i()(this,e)}return o()(e,null,[{key:"getBarcodeLine",value:function(e,t,r){var n,i,a=0|t.x,o=0|t.y,s=0|r.x,u=0|r.y,c=Math.abs(u-o)>Math.abs(s-a),h=[],l=e.data,f=e.size.x,d=255,v=0;function _(e,t){i=l[t*f+e],d=i<d?i:d,v=i>v?i:v,h.push(i)}c&&(n=a,a=o,o=n,n=s,s=u,u=n),a>s&&(n=a,a=s,s=n,n=o,o=u,u=n);for(var p=s-a,g=Math.abs(u-o),y=p/2|0,m=o,b=o<u?1:-1,w=a;w<s;w++)c?_(m,w):_(w,m),(y-=g)<0&&(m+=b,y+=p);return{line:h,min:d,max:v}}},{key:"toBinaryLine",value:function(e){var t=e.min,r=e.max,n=e.line,i=t+(r-t)/2,a=new Array,o=(r-t)/12,s=-o,c=n[0]>i?Y.Up:Y.Down;a.push({pos:0,val:n[0]});for(var h=0;h<n.length-2;h++){var l=n[h+1]-n[h],f=n[h+2]-n[h+1],d=void 0;c!==(d=l+f<s&&n[h+1]<1.5*i?Y.Down:l+f>o&&n[h+1]>.5*i?Y.Up:c)&&(a.push({pos:h,val:n[h]}),c=d)}a.push({pos:n.length,val:n[n.length-1]});for(var v=a[0].pos;v<a[1].pos;v++)n[v]=n[v]>i?0:1;for(var _=1;_<a.length-1;_++){o=a[_+1].val>a[_].val?a[_].val+(a[_+1].val-a[_].val)/3*2|0:a[_+1].val+(a[_].val-a[_+1].val)/3|0;for(var p=a[_].pos;p<a[_+1].pos;p++)n[p]=n[p]>o?0:1}return function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ge(r,!0).forEach(function(t){u()(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ge(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}({},e,{threshold:o})}}]),e}(),be=function(){function e(t,r){i()(this,e),u()(this,"_config",void 0),u()(this,"_inputImageWrapper",void 0),u()(this,"_frequencyCanvas",void 0),u()(this,"_patternCanvas",void 0),u()(this,"_overlayContext",void 0),u()(this,"_barcodeReaders",void 0),this._config=t,this._inputImageWrapper=r,this._barcodeReaders=[],this._initReaders()}return o()(e,[{key:"decodeFromBoundingBoxes",value:function(e){for(var t=[],r=this._config.multiple,n=0;n<e.length;n++){var i=e[n],a=this.decodeFromBoundingBox(i)||{};if(a.box=i,r)t.push(a);else if(a.codeResult)return a}return r?{barcodes:t}:null}},{key:"decodeFromBoundingBox",value:function(e){var t=this._getLine(e);if(null===t)return null;var r=Math.atan2(t[1].y-t[0].y,t[1].x-t[0].x);t=this._getExtendedLine(t,r);var n=this._tryDecode(t);return null===n&&(n=this._tryDecodeBruteForce(e,t,r)),null===n?null:{codeResult:n.codeResult,line:t,angle:r,pattern:n.barcodeLine.line,threshold:n.barcodeLine.threshold}}},{key:"setReaders",value:function(e){this._config.readers=e,this._barcodeReaders.length=0,this._initReaders()}},{key:"_initReaders",value:function(){var e=this;this._config.readers.forEach(function(t){var r,n={},i=[];"object"===y()(t)?(r=t.format,n=t.config||{}):"string"==typeof t&&(r=t),n.supplements&&(i=n.supplements.map(function(e){return new pe[e]})),e._barcodeReaders.push(new pe[r](n,i))})}},{key:"_getExtendedLine",value:function(e,t){function r(r){var n=r*Math.sin(t),i=r*Math.cos(t);e[0].y-=n,e[0].x-=i,e[1].y+=n,e[1].x+=i}var n=.1*Math.sqrt(Math.pow(e[1].y-e[0].y,2)+Math.pow(e[1].x-e[0].x,2))|0;for(r(n);n>1&&(!this._inputImageWrapper.inImageWithBorder(e[0],0)||!this._inputImageWrapper.inImageWithBorder(e[1],0));)r(-(n>>=1));return e}},{key:"_getLine",value:function(e){return[{x:(e[1].x+e[0].x)/2,y:(e[1].y+e[0].y)/2},{x:(e[3].x+e[2].x)/2,y:(e[3].y+e[2].y)/2}]}},{key:"_tryDecode",value:function(e){var t=me.getBarcodeLine(this._inputImageWrapper,e[0],e[1]);t=me.toBinaryLine(t);for(var r=0;r<this._barcodeReaders.length;r++){var n=this._barcodeReaders[r].decodePattern(t.line);if(n)return{codeResult:n,barcodeLine:t}}return null}},{key:"_tryDecodeBruteForce",value:function(e,t,r){for(var n=Math.sqrt(Math.pow(e[1].x-e[0].x,2)+Math.pow(e[1].y-e[0].y,2)),i=Math.sin(r),a=Math.cos(r),o=1;o<16;o++){var s=n/16*o*(o%2==0?-1:1);t[0].y+=s*i,t[0].x-=s*a,t[1].y+=s*i,t[1].x-=s*a;var u=this._tryDecode(t);if(u)return u}return null}},{key:"_printFrequency",value:function(e){var t=this._frequencyCanvas.getContext("2d");this._frequencyCanvas.width=e.length,this._frequencyCanvas.height=256,t.beginPath(),t.strokeStyle="blue";for(var r=0;r<e.length;r++)t.moveTo(r,255),t.lineTo(r,255-e[r]);t.closePath(),t.stroke()}},{key:"_printPattern",value:function(e){var t=this._patternCanvas.getContext("2d");this._patternCanvas.width=e.length,t.fillStyle="black";for(var r=0;r<e.length;r++)1===e[r]&&t.fillRect(r,0,1,100)}},{key:"_drawPath",value:function(e,t,r){c.drawPath(e,this._overlayContext,t,r)}}]),e}(),we=r(10),xe=r.n(we),ke=r(11),Ce=r.n(ke);var Ae,Se,Ee={request:(Se=Ce()(xe.a.mark(function e(t,r){var n;return xe.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=Ee.pickConstraints(r),e.next=3,i=n,navigator.mediaDevices&&"function"==typeof navigator.mediaDevices.getUserMedia?navigator.mediaDevices.getUserMedia(i):Promise.reject(new Error("getUserMedia is not defined"));case 3:return ye=e.sent,t.srcObject=ye,t.setAttribute("autoplay",""),t.setAttribute("muted",""),t.setAttribute("playsinline",""),e.abrupt("return",new Promise(function(e){return t.addEventListener("loadedmetadata",function(){t.play(),e()})}).then(Pe.bind(null,t)));case 9:case"end":return e.stop()}var i},e)})),function(e,t){return Se.apply(this,arguments)}),release:function(){var e=ye&&ye.getVideoTracks();e&&e.length&&e[0].stop(),ye=null},enumerateVideoDevices:(Ae=Ce()(xe.a.mark(function e(){var t;return xe.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,navigator.mediaDevices&&"function"==typeof navigator.mediaDevices.enumerateDevices?navigator.mediaDevices.enumerateDevices():Promise.reject(new Error("enumerateDevices is not defined"));case 2:return t=e.sent,e.abrupt("return",t.filter(function(e){return"videoinput"===e.kind}));case 4:case"end":return e.stop()}},e)})),function(){return Ae.apply(this,arguments)}),getActiveStreamLabel:function(){var e=Ee.getActiveTrack();return e?e.label:""},getActiveTrack:function(){var e=ye&&ye.getVideoTracks();return e&&e.length?e[0]:null},pickConstraints:function(e){var t=e.width,r=e.height,n=e.facingMode,i=e.aspectRatio,a=e.deviceId,o=e,s=o.minAspectRatio,u=o.facing;return void 0!==s&&s>0&&(i=s,console.log("WARNING: Constraint 'minAspectRatio' is deprecated; Use 'aspectRatio' instead")),void 0!==u&&(n=u,console.log("WARNING: Constraint 'facing' is deprecated. Use 'facingMode' instead'")),{audio:!1,video:a&&n?{width:t,height:r,aspectRatio:i,deviceId:a}:{width:t,height:r,facingMode:n,aspectRatio:i,deviceId:a}}}};function Pe(e){var t=e.videoWidth,r=e.videoHeight;return new Promise(function(e,n){var i=10;!function a(){i>0?t>10&&r>10?e():window.setTimeout(a,500):n("Unable to play video stream. Is webcam working?"),i--}()})}var Oe=r(19),Re=r(20).d2,ze=function(){function e(t){i()(this,e),u()(this,"_inputStream",void 0),u()(this,"_streamConfig",void 0),u()(this,"_data",void 0),u()(this,"_canvasData",void 0),u()(this,"_grayData",void 0),u()(this,"_canvasImageArray",void 0),u()(this,"_grayImageArray",void 0),u()(this,"_targetImageArray",void 0),u()(this,"_canvasHeight",void 0),u()(this,"_canvasWidth",void 0),u()(this,"_videoHeight",void 0),u()(this,"_videoWidth",void 0),u()(this,"_height",void 0),u()(this,"_width",void 0),u()(this,"_stepSizeX",void 0),u()(this,"_stepSizeY",void 0),u()(this,"_topLeft",void 0),this._inputStream=t,this._streamConfig=t.config,this._videoHeight=t.realHeight,this._videoWidth=t.realWidth,this._canvasHeight=t.canvasHeight,this._canvasWidth=t.canvasWidth,this._width=t.width,this._height=t.height,this._topLeft=t.topLeft,this._data=new Uint8Array(this._width*this._height),this._grayData=new Uint8Array(this._videoWidth*this._videoHeight),this._canvasData=new Uint8Array(this._canvasWidth*this._canvasHeight),this._grayImageArray=Oe(this._grayData,[this._videoHeight,this._videoWidth]).transpose(1,0),this._canvasImageArray=Oe(this._canvasData,[this._canvasHeight,this._canvasWidth]).transpose(1,0),this._targetImageArray=this._canvasImageArray.hi(this._topLeft.x+this._width,this._topLeft.y+this._height).lo(this._topLeft.x,this._topLeft.y),this._stepSizeX=this._videoWidth/this._canvasWidth,this._stepSizeY=this._videoHeight/this._canvasHeight,console.log("FrameGrabber",JSON.stringify({videoSize:this._grayImageArray.shape,canvasSize:this._canvasImageArray.shape,stepSize:[this._stepSizeX,this._stepSizeY],size:this._targetImageArray.shape,topLeft:this._topLeft}))}return o()(e,[{key:"attachData",value:function(e){this._data=e}},{key:"grab",value:function(){var e=this._inputStream.getFrame();return!!e&&(this._scaleAndCrop(e),!0)}},{key:"_scaleAndCrop",value:function(e){this._computeGray(e.data);for(var t=0;t<this._canvasHeight;t++)for(var r=0;r<this._canvasWidth;r++)this._canvasImageArray.set(r,t,0|Re(this._grayImageArray,r*this._stepSizeX,t*this._stepSizeY));if(this._targetImageArray.shape[0]!==this._width||this._targetImageArray.shape[1]!==this._height)throw new Error("Shapes do not match!");for(var n=0;n<this._height;n++)for(var i=0;i<this._width;i++)this._data[n*this._width+i]=this._targetImageArray.get(i,n)}},{key:"_computeGray",value:function(e){var t=e.length;if(this._streamConfig&&this._streamConfig.singleChannel)for(var r=0,n=0;r<t;r+=4,n++)this._data[n]=e[r];else for(var i=0,a=0;i<t;i+=4,a++)this._data[a]=.299*e[i]+.587*e[i+1]+.114*e[i+2]|0}}]),e}();function De(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}var Ie=function(){function e(){i()(this,e),u()(this,"_calculatedHeight",void 0),u()(this,"_calculatedWidth",void 0),u()(this,"_canvasHeight",void 0),u()(this,"_canvasWidth",void 0),u()(this,"_config",void 0),u()(this,"_eventNames",void 0),u()(this,"_eventHandlers",void 0),u()(this,"_topLeft",void 0),this._canvasWidth=0,this._canvasHeight=0,this._config=null,this._eventNames=["canrecord","ended"],this._eventHandlers=new Map,this._topLeft={x:0,y:0}}return o()(e,[{key:"setCanvasSize",value:function(e,t){this._canvasWidth=e,this._canvasHeight=t}},{key:"addEventListener",value:function(e,t,r){-1!==this._eventNames.indexOf(e)&&(this._eventHandlers.has(e)||this._eventHandlers.set(e,new Array),this._eventHandlers.get(e).push(t))}},{key:"clearEventHandlers",value:function(){this._eventHandlers.clear()}},{key:"trigger",value:function(e,t){var r=this._eventHandlers.get(e);if(r&&r.length>0)for(var n=0;n<r.length;n++)r[n].apply(this,t)}},{key:"height",get:function(){return this._calculatedHeight},set:function(e){this._calculatedHeight=e}},{key:"width",get:function(){return this._calculatedWidth},set:function(e){this._calculatedWidth=e}},{key:"topLeft",get:function(){return function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?De(r,!0).forEach(function(t){u()(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):De(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}({},this._topLeft)},set:function(e){this._topLeft.x=e.x,this._topLeft.y=e.y}},{key:"canvasHeight",get:function(){return this._canvasHeight}},{key:"canvasWidth",get:function(){return this._canvasWidth}}]),e}();function We(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}var Le=r(21),Te=function(e){function t(){var e;return i()(this,t),e=A()(this,E()(t).call(this)),u()(H()(e),"_baseUrl",void 0),u()(H()(e),"_ended",void 0),u()(H()(e),"_frame",void 0),u()(H()(e),"_height",void 0),u()(H()(e),"_loaded",void 0),u()(H()(e),"_offset",void 0),u()(H()(e),"_size",void 0),u()(H()(e),"_width",void 0),e._canvasHeight=0,e._canvasWidth=0,e._baseUrl=null,e._ended=!1,e._frame=null,e._height=0,e._loaded=!1,e._offset=1,e._size=0,e._width=0,e}return O()(t,e),o()(t,[{key:"setAttribute",value:function(){}},{key:"pause",value:function(){}},{key:"play",value:function(){}},{key:"getFrame",value:function(){return this._loaded?this._frame:null}},{key:"_loadImages",value:function(){var e=this;this._loaded=!1,Le(this._baseUrl,this._config.mime,function(t,r){t&&(console.log(t),process.exit(1)),e._loaded=!0,e._frame=r,console.log(r.shape),e._width=0|r.shape[0],e._height=0|r.shape[1],e._canvasWidth=e._calculatedWidth=e._config.size?e._width>e._height?e._config.size:e._width*e._config.size/e._height|0:e._width,e._canvasHeight=e._calculatedHeight=e._config.size?e._width>e._height?e._height*e._config.size/e._width|0:e._config.size:e._height,setTimeout(function(){return e.trigger("canrecord",[])},0)},this._offset,this._size,this._config.sequence)}},{key:"realHeight",get:function(){return this._height}},{key:"realWidth",get:function(){return this._width}},{key:"config",get:function(){return this._config},set:function(e){this._config=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?We(r,!0).forEach(function(t){u()(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):We(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}({},e),this._baseUrl=e.src||"",this._loadImages()}},{key:"ended",get:function(){return this._ended}},{key:"currentTime",set:function(e){}}]),t}(Ie);function je(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}var Me=function(e){function t(e){var r;return i()(this,t),r=A()(this,E()(t).call(this)),u()(H()(r),"_video",void 0),r._video=e,r}return O()(t,e),o()(t,[{key:"setAttribute",value:function(e,t){this._video.setAttribute(e,t)}},{key:"pause",value:function(){this._video.pause()}},{key:"play",value:function(){this._video.play()}},{key:"addEventListener",value:function(e,r,n){G()(E()(t.prototype),"addEventListener",this).call(this,e,r,n),-1===this._eventNames.indexOf(e)&&this._video.addEventListener(e,r,n)}},{key:"clearEventHandlers",value:function(){G()(E()(t.prototype),"clearEventHandlers",this).call(this)}},{key:"trigger",value:function(e,r){"canrecord"===e&&this._initSize(),G()(E()(t.prototype),"trigger",this).call(this,e,r)}},{key:"getFrame",value:function(){return this._video}},{key:"_initSize",value:function(){var e=this._video.videoWidth,t=this._video.videoHeight;this._canvasWidth=this._calculatedWidth=this._config.size?e>t?this._config.size:e*this._config.size/t|0:e,this._canvasHeight=this._calculatedHeight=this._config.size?e>t?t*this._config.size/e|0:this._config.size:t}},{key:"realHeight",get:function(){return this._video.videoHeight}},{key:"realWidth",get:function(){return this._video.videoWidth}},{key:"config",get:function(){return this._config},set:function(e){this._config=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?je(r,!0).forEach(function(t){u()(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):je(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}({},e),this._video.src=e.src||""}},{key:"ended",get:function(){return this._video.ended}},{key:"currentTime",set:function(e){"LiveStream"!==this._config.type&&(this._video.currentTime=e)}}]),t}(Ie),Ge=function(e){function t(e){return i()(this,t),e.setAttribute("autoplay",""),A()(this,E()(t).call(this,e))}return O()(t,e),o()(t,[{key:"ended",get:function(){return!1}}]),t}(Me);function Ue(e){for(var t=new Array,r=new Array,n=1;n*n<=e;n++)e%n==0&&(t.push(n),n*n!==e&&r.unshift(e/n|0));return t.concat(r)}function Ne(e,t){var r=t.x,n=t.y,i=0|Math.max(0|r,0|n),a=[8,10,15,20,32,60,80],o={"x-small":5,small:4,medium:3,large:2,"x-large":1},s=o[e]||0|o.medium,u=0|a[s],c=i/u|0;function h(e){for(var t=0,r=0|e[e.length>>1];t<e.length-1&&e[t]<c;)t++;return t>0&&(r=Math.abs(e[t]-c)>Math.abs(e[t-1]-c)?0|e[t-1]:0|e[t]),c/r<a[s+1]/a[s]&&c/r>a[s-1]/a[s]?{x:r,y:r}:null}return h(function(e,t){if(e===t)return Ue(e);for(var r=e>t?e:t,n=e>t?t:e,i=new Array,a=new Array,o=1;o*o<=n;o++)if(r%o==0&&n%o==0){i.push(o);var s=n/o|0;o!==s&&r%s==0&&a.unshift()}return i.concat(a)}(r,n))||h(Ue(i))||h(Ue(c*u))}function He(e,t){var r=e.width,n=e.height,i=t.halfSample?1:0,a=e.config;if(a&&a.area){var o=function(e,t,r){var n={width:e,height:t},i=Object.keys(r).reduce(function(e,t){var i=r[t],a=function(e){return{value:parseFloat(e),unit:e.indexOf("%")===e.length-1?"%":e.indexOf("px")===e.length-2?"px":"%"}}(i),o=Be[t](a,n);return e[t]=o,e},{});return{topLeft:{x:i.left,y:i.top},width:i.right-i.left,height:i.bottom-i.top}}(r,n,a.area);e.topLeft=o.topLeft,e.setCanvasSize(r,n),r=o.width,n=o.height}var s={x:r>>i,y:n>>i},u=Ne(t.patchSize,s);if(e.width=(s.x/u.x<<i)*u.x|0,e.height=(s.y/u.y<<i)*u.y|0,e.width%u.x==0&&e.height%u.y==0)return!0;throw new Error("Image dimensions do not comply with the current settings: width (".concat(r,") and height (").concat(n,") must be a multiple of ").concat(u.x))}var Be={bottom:function(e,t){var r=t.height;return"%"===e.unit?r-r*e.value/100|0:"px"===e.unit?r-e.value:r},left:function(e,t){var r=t.width;return"%"===e.unit?r*e.value/100|0:"px"===e.unit?e.value:0},right:function(e,t){var r=t.width;return"%"===e.unit?r-r*e.value/100|0:"px"===e.unit?r-e.value:r},top:function(e,t){var r=t.height;return"%"===e.unit?r*e.value/100|0:"px"===e.unit?e.value:0}};var Fe=function(){function e(t,r){i()(this,e),u()(this,"_threshold",void 0),u()(this,"_moments",void 0),u()(this,"_center",void 0),this._threshold=t,this._moments=new Array,this._center={rad:0,x:0,y:0},r&&this.add(r)}return o()(e,null,[{key:"clusterize",value:function(t,r){var n=new Array;return t.forEach(function(t){var i=n.find(function(e){return e.fits(t)});i?i.add(t):n.push(new e(r,t))}),n}}]),o()(e,[{key:"add",value:function(e){this._moments.push(e),this._center.rad=this._moments.reduce(function(e,t){return e+t.rad},0)/this._moments.length,this._center.x=Math.cos(this._center.rad),this._center.y=Math.sin(this._center.rad)}},{key:"fits",value:function(e){return Math.abs(e.x*this._center.x+e.y*this._center.y)>this._threshold}},{key:"moments",get:function(){return this._moments}}]),e}();function Ve(e,t){var r=e.x,n=e.y;return{x:t[0]*r+t[2]*n,y:t[1]*r+t[3]*n}}function qe(e,t){t||(t=8);var r=8-t,n=function(e,t){t||(t=8);for(var r=e.data,n=8-t,i=new Int32Array(1<<t),a=r.length;a--;)i[r[a]>>n]++;return i}(e,t),i=[0],a=(1<<t)-1;function o(e,t){for(var r=0,i=e;i<=t;i++)r+=n[i];return r}function s(e,t){for(var r=0,i=e;i<=t;i++)r+=i*n[i];return r}for(var u=1;u<a;u++){var c=o(0,u),h=o(u+1,a),l=c*h||1,f=s(0,u)*h-s(u+1,a)*c;i[u]=f*f/l}return i.reduce(function(e,t,r,n){return t>n[e]?r:e},0)<<r}var Xe,Ye,Qe=[[0,1],[1,1],[1,0],[1,-1],[0,-1],[-1,-1],[-1,0],[-1,1]],Ze=function(){function e(t,r){i()(this,e),u()(this,"_imageData",void 0),u()(this,"_labelData",void 0),u()(this,"_width",void 0),this._imageData=t.data,this._labelData=r.data,this._width=t.size.x}return o()(e,[{key:"trace",value:function(e,t,r,n){for(var i=0;i<7;i++){var a=e.cy+Qe[e.dir][0]|0,o=e.cx+Qe[e.dir][1]|0,s=a*this._width+o|0;if(this._imageData[s]===t&&(0===this._labelData[s]||this._labelData[s]===r))return this._labelData[s]=r,e.cx=o,e.cy=a,!0;0===this._labelData[s]&&(this._labelData[s]=n),e.dir=(e.dir+1)%8}return!1}},{key:"contourTracing",value:function(e,t,r,n,i){var a=null,o={cx:t,cy:e,dir:0};if(this.trace(o,n,r,i)){var s=a={x:t,y:e,dir:o.dir,next:null,prev:null},u=o.dir,c={x:o.cx,y:o.cy,dir:0,next:null,prev:s};s.next=c,s=c;do{o.dir=(o.dir+6)%8,this.trace(o,n,r,i),u!==o.dir?(s.dir=o.dir,c={x:o.cx,y:o.cy,dir:0,next:null,prev:s},s.next=c,s=c):(s.dir=u,s.x=o.cx,s.y=o.cy),u=o.dir}while(o.cx!==t||o.cy!==e);a.prev=s.prev,s.prev.next=a}return a}}]),e}();!function(e){e[e.Outside=-32767]="Outside",e[e.Inside=-32766]="Inside"}(Xe||(Xe={})),function(e){e[e.CW=0]="CW",e[e.CCW=1]="CCW",e[e.Unknown=2]="Unknown"}(Ye||(Ye={}));var Ke=function(){function e(t,r){i()(this,e),u()(this,"_width",void 0),u()(this,"_height",void 0),u()(this,"_tracer",void 0),u()(this,"_imageData",void 0),u()(this,"_labelData",void 0),this._imageData=t.data,this._labelData=r.data,this._width=t.size.x,this._height=t.size.y,this._tracer=new Ze(t,r)}return o()(e,[{key:"rasterize",value:function(e){for(var t=new Array,r=0;r<400;r++)t[r]=0;t[0]=this._imageData[0];for(var n,i=null,a=0,o=1;o<this._height-1;o++)for(var s=0,u=t[0],c=1;c<this._width-1;c++){var h=o*this._width+c;if(0===this._labelData[h]){var l=this._imageData[h];if(l!==u)if(0===s){var f=a+1;t[f]=l,u=l;var d=this._tracer.contourTracing(o,c,f,l,Xe.Outside);if(null!==d){a++,s=f;var v={dir:Ye.CW,index:s,firstVertex:d,nextPeer:i,insideContours:null};null!==i&&(i.previousPeer=v),i=v}}else{var _=this._tracer.contourTracing(o,c,Xe.Inside,l,s);if(null!==_){var p={dir:0===e?Ye.CCW:Ye.CW,firstVertex:_,index:e,insideContours:null};for(n=i;null!==n&&n.index!==s;)n=n.nextPeer;null!==n&&(p.nextPeer=n.insideContours,null!==n.insideContours&&(n.insideContours.previousPeer=p),n.insideContours=p)}}else this._labelData[h]=s}else this._labelData[h]===Xe.Inside?(s=0,u=this._imageData[h]):this._labelData[h]===Xe.Outside?(s=0,u=t[0]):u=t[s=this._labelData[h]]}for(n=i;null!==n;)n.index=e,n=n.nextPeer;return{cc:i,count:a}}},{key:"drawContour",value:function(e,t){var r=e.getContext("2d");r.strokeStyle="red",r.fillStyle="red",r.lineWidth=1;for(var n=t,i=n&&n.insideContours;null!==n;){var a=i||n;switch(i=null!==i?i.nextPeer:(n=n.nextPeer)&&n.insideContours,a.dir){case Ye.CW:r.strokeStyle="red";break;case Ye.CCW:r.strokeStyle="blue";break;case Ye.Unknown:r.strokeStyle="green"}var o=a.firstVertex;r.beginPath(),r.moveTo(o.x,o.y);do{o=o.next,r.lineTo(o.x,o.y)}while(o!==a.firstVertex);r.stroke()}}}]),e}();var Je,$e,et,tt,rt,nt,it,at,ot,st,ut=function(e,t,r){"use asm";var n=new e.Uint8Array(r),i=t.size|0,a=e.Math.imul;function o(e,t){e=e|0;t=t|0;var r=0,a=0,o=0,s=0,u=0,c=0,h=0,l=0;for(r=1;(r|0)<(i-1|0);r=r+1|0){l=l+i|0;for(a=1;(a|0)<(i-1|0);a=a+1|0){s=l-i|0;u=l+i|0;c=a-1|0;h=a+1|0;o=(n[e+s+c|0]|0)+(n[e+s+h|0]|0)+(n[e+l+a|0]|0)+(n[e+u+c|0]|0)+(n[e+u+h|0]|0)|0;if((o|0)==(5|0)){n[t+l+a|0]=1}else{n[t+l+a|0]=0}}}return}function s(e,t,r){e=e|0;t=t|0;r=r|0;var o=0;o=a(i,i)|0;while((o|0)>0){o=o-1|0;n[r+o|0]=(n[e+o|0]|0)-(n[t+o|0]|0)|0}}function u(e,t,r){e=e|0;t=t|0;r=r|0;var o=0;o=a(i,i)|0;while((o|0)>0){o=o-1|0;n[r+o|0]=n[e+o|0]|0|(n[t+o|0]|0)|0}}function c(e){e=e|0;var t=0,r=0;r=a(i,i)|0;while((r|0)>0){r=r-1|0;t=(t|0)+(n[e+r|0]|0)|0}return t|0}function h(e,t){e=e|0;t=t|0;var r=0;r=a(i,i)|0;while((r|0)>0){r=r-1|0;n[e+r|0]=t}}function l(e,t){e=e|0;t=t|0;var r=0,a=0,o=0,s=0,u=0,c=0,h=0,l=0;for(r=1;(r|0)<(i-1|0);r=r+1|0){l=l+i|0;for(a=1;(a|0)<(i-1|0);a=a+1|0){s=l-i|0;u=l+i|0;c=a-1|0;h=a+1|0;o=(n[e+s+c|0]|0)+(n[e+s+h|0]|0)+(n[e+l+a|0]|0)+(n[e+u+c|0]|0)+(n[e+u+h|0]|0)|0;if((o|0)>(0|0)){n[t+l+a|0]=1}else{n[t+l+a|0]=0}}}return}function f(e,t){e=e|0;t=t|0;var r=0;r=a(i,i)|0;while((r|0)>0){r=r-1|0;n[t+r|0]=n[e+r|0]|0}}function d(e){e=e|0;var t=0,r=0;for(t=0;(t|0)<(i-1|0);t=t+1|0){n[e+t|0]=0;n[e+r|0]=0;r=r+i-1|0;n[e+r|0]=0;r=r+1|0}for(t=0;(t|0)<(i|0);t=t+1|0){n[e+r|0]=0;r=r+1|0}}function v(){var e=0,t=0,r=0,n=0,v=0,_=0;t=a(i,i)|0;r=t+t|0;n=r+t|0;h(n,0);d(e);do{o(e,t);l(t,r);s(e,r,r);u(n,r,n);f(t,e);v=c(e)|0;_=(v|0)==0|0}while(!_)}return{skeletonize:v}},ct=function(){function e(t,r){i()(this,e),u()(this,"_config",void 0),u()(this,"_inputImageWrapper",void 0),u()(this,"_currentImageWrapper",void 0),u()(this,"_skelImageWrapper",void 0),u()(this,"_subImageWrapper",void 0),u()(this,"_labelImageWrapper",void 0),u()(this,"_binaryImageWrapper",void 0),u()(this,"_patchGrid",void 0),u()(this,"_patchLabelGrid",void 0),u()(this,"_imageToPatchGrid",void 0),u()(this,"_patchSize",void 0),u()(this,"_binaryContext",void 0),u()(this,"_numPatches",void 0),u()(this,"_skeletonizer",void 0),this._config=r,this._inputImageWrapper=t,this._numPatches={x:0,y:0},this._initBuffers(),this._initCanvas()}return o()(e,[{key:"locate",value:function(){this._config.halfSample&&function(e,t){for(var r=e.data,n=e.size.x,i=t.data,a=r.length,o=n>>1,s=0,u=n,c=0;u<a;){for(var h=0;h<o;h++)i[c]=r[s]+r[s+1]+r[u]+r[u+1]>>2,c++,s+=2,u+=2;s+=n,u+=n}}(this._inputImageWrapper,this._currentImageWrapper),this._binarizeImage();var e=this._findPatches();if(e.length<this._numPatches.x*this._numPatches.y*.05)return null;var t=this._rasterizeAngularSimilarity(e);if(t<1)return null;var r=this._findBiggestConnectedAreas(t);return 0===r.length?null:this._findBoxes(r,t)}},{key:"_initBuffers",value:function(){this._config.halfSample?this._currentImageWrapper=new p({x:this._inputImageWrapper.size.x/2|0,y:this._inputImageWrapper.size.y/2|0}):this._currentImageWrapper=this._inputImageWrapper,this._patchSize=Ne(this._config.patchSize,this._currentImageWrapper.size),this._numPatches.x=this._currentImageWrapper.size.x/this._patchSize.x|0,this._numPatches.y=this._currentImageWrapper.size.y/this._patchSize.y|0,this._binaryImageWrapper=new p(this._currentImageWrapper.size,void 0,Uint8Array,!1),this._labelImageWrapper=new p(this._patchSize,void 0,Array,!0);var e=new ArrayBuffer(65536);this._subImageWrapper=new p(this._patchSize,new Uint8Array(e,0,this._patchSize.x*this._patchSize.y)),this._skelImageWrapper=new p(this._patchSize,new Uint8Array(e,this._patchSize.x*this._patchSize.y*3,this._patchSize.x*this._patchSize.y),void 0,!0),this._skeletonizer=ut("undefined"!=typeof window?window:"undefined"!=typeof self?self:global,{size:this._patchSize.x},e);var t={x:this._currentImageWrapper.size.x/this._subImageWrapper.size.x|0,y:this._currentImageWrapper.size.y/this._subImageWrapper.size.y|0};this._patchLabelGrid=new p(t,void 0,Int32Array,!0),this._patchGrid=new p(t,void 0,void 0,!0),this._imageToPatchGrid=new Array(this._patchLabelGrid.data.length)}},{key:"_initCanvas",value:function(){if(!this._config.useWorker&&"undefined"!=typeof document){var e=document.createElement("canvas");e.className="binaryBuffer",e.width=this._binaryImageWrapper.size.x,e.height=this._binaryImageWrapper.size.y,this._binaryContext=e.getContext("2d")}}},{key:"_boxFromPatches",value:function(e){var t=e.reduce(function(e,t){t.pos;return e+t.rad},0)/e.length;(t=(180*t/Math.PI+90)%180-90)<0&&(t+=180),t=(180-t)*Math.PI/180;var r=Math.cos(t),n=Math.sin(t),i=new Float32Array([r,n,-n,r]),a=function(e){var t=e[0],r=e[1],n=e[2],i=e[3],a=t*i-n*r;return a?new Float32Array([i/a,-r/a,-n/a,t/a]):null}(i);e.forEach(function(e){for(var t=e.box,r=0;r<4;r++)t[r]=Ve(t[r],i)});var o=this._binaryImageWrapper.size.x,s=this._binaryImageWrapper.size.y,u=-o,c=-s;e.forEach(function(e){e.box.forEach(function(e){var t=e.x,r=e.y;t<o&&(o=t),t>u&&(u=t),r<s&&(s=r),r>c&&(c=r)})});var h=[{x:o,y:s},{x:u,y:s},{x:u,y:c},{x:o,y:c}];return h=h.map(function(e){return Ve(e,a)}),this._config.halfSample&&(h=h.map(function(e){var t=e.x,r=e.y;return{x:2*t,y:r*=2}})),h}},{key:"_binarizeImage",value:function(){var e,t,r,n;e=this._currentImageWrapper,t=this._binaryImageWrapper,r=qe(e),n=t.data,e.data.forEach(function(e,t){n[t]=e<r?1:0}),this._binaryImageWrapper.zeroBorder()}},{key:"_findPatches",value:function(){for(var e=new Array,t=0;t<this._numPatches.x;t++)for(var r=0;r<this._numPatches.y;r++){var n=this._subImageWrapper.size.x*t,i=this._subImageWrapper.size.y*r;this._skeletonize(n,i),this._skelImageWrapper.zeroBorder(),this._labelImageWrapper.data.fill(0);var a=new Ke(this._skelImageWrapper,this._labelImageWrapper).rasterize(0);0;var o=this._labelImageWrapper.moments(a.count),s=this._describePatch(o,r*this._numPatches.x+t,n,i);s&&e.push(s)}return e}},{key:"_findBiggestConnectedAreas",value:function(e){var t=new Array(e).fill(0);return this._patchLabelGrid.data.forEach(function(e){e>0&&t[e-1]++}),t.map(function(e,t){return{value:e,index:t}}).filter(function(e){return e.value>=5}).sort(function(e,t){return t.value-e.value}).map(function(e){return e.index+1})}},{key:"_findBoxes",value:function(e,t){var r=this,n=new Array;return e.forEach(function(e){var t=new Array;r._patchLabelGrid.data.forEach(function(n,i){n===e&&t.push(r._imageToPatchGrid[i])});var i=r._boxFromPatches(t);i&&n.push(i)}),n}},{key:"_similarMoments",value:function(e){return Fe.clusterize(e,.9).reduce(function(e,t){var r=t.moments.length;return r>e.count?{item:t,count:r}:e},{item:{moments:[]},count:0}).item.moments}},{key:"_skeletonize",value:function(e,t){this._binaryImageWrapper.subImageAsCopy(this._subImageWrapper,e,t),this._skeletonizer.skeletonize()}},{key:"_describePatch",value:function(e,t,r,n){if(e.length>1){var i=Math.ceil(this._patchSize.x/3),a=e.filter(function(e){return e.m00>i});if(a.length>1){var o=this._similarMoments(a),s=0|o.length;if(s>1&&s<<2>=3*a.length&&s<<2>e.length){var u=o.reduce(function(e,t){return e+t.rad},0)/s;return{index:t,pos:{x:r,y:n},box:[{x:r,y:n},{x:r+this._subImageWrapper.size.x,y:n},{x:r+this._subImageWrapper.size.x,y:n+this._subImageWrapper.size.y},{x:r,y:n+this._subImageWrapper.size.y}],moments:o,rad:u,x:Math.cos(u),y:Math.sin(u)}}}}return null}},{key:"_notYetProcessed",value:function(){for(var e=0;e<this._patchLabelGrid.data.length;e++)if(0===this._patchLabelGrid.data[e]&&1===this._patchGrid.data[e])return e;return this._patchLabelGrid.data.length}},{key:"_trace",value:function(e,t){var r=this,n=e%this._patchLabelGrid.size.x,i=e/this._patchLabelGrid.size.x|0;if(e<this._patchLabelGrid.data.length){var a=this._imageToPatchGrid[e];this._patchLabelGrid.data[e]=t,Qe.forEach(function(e){var o=i+e[0],s=n+e[1],u=o*r._patchLabelGrid.size.x+s;if(0===r._patchGrid.data[u])r._patchLabelGrid.data[u]=Number.MAX_VALUE;else if(0===r._patchLabelGrid.data[u]){var c=r._imageToPatchGrid[u];Math.abs(c.x*a.x+c.y*a.y)>.95&&r._trace(u,t)}})}}},{key:"_rasterizeAngularSimilarity",value:function(e){var t=this,r=0;this._patchGrid.data.fill(0),this._patchLabelGrid.data.fill(0),this._imageToPatchGrid.fill(null),e.forEach(function(e){t._imageToPatchGrid[e.index]=e,t._patchGrid.data[e.index]=1}),this._patchGrid.zeroBorder();for(var n=0;(n=this._notYetProcessed())<this._patchLabelGrid.data.length;)r++,this._trace(n,r);return r}},{key:"_drawRect",value:function(e,t,r,n){var i=e.x,a=e.y;this._binaryContext.strokeStyle=r,this._binaryContext.fillStyle=r,this._binaryContext.lineWidth=n||1,this._binaryContext.strokeRect(i,a,t.x,t.y)}},{key:"_drawPath",value:function(e,t,r){c.drawPath(e,this._binaryContext,t,r)}}]),e}(),ht={ctx:{image:null,overlay:null},dom:{image:null,overlay:null}},lt=new Array;t.default={init:function(e,t,r){at=!0,st=m(w,e),r?(at=!1,ft(r),t()):function(e){var t;if("VideoStream"===st.inputStream.type)t=document.createElement("video"),Je=new Me(t);else if("ImageStream"===st.inputStream.type)Je=new Te;else if("LiveStream"===st.inputStream.type){var r=dt();r&&((t=r.querySelector("video"))||(t=document.createElement("video"),r.appendChild(t))),Je=new Ge(t),Ee.request(t,st.inputStream.constraints).then(function(){return Je.trigger("canrecord")},function(t){return e(t)})}Je.setAttribute("preload","auto"),Je.config=st.inputStream,Je.addEventListener("canrecord",function(e){He(Je,st.locator),function(){if("undefined"!=typeof document){var e=dt();if(ht.dom.image=document.querySelector("canvas.imgBuffer"),ht.dom.image||(ht.dom.image=document.createElement("canvas"),ht.dom.image.className="imgBuffer",e&&"ImageStream"===st.inputStream.type&&e.appendChild(ht.dom.image)),ht.ctx.image=ht.dom.image.getContext("2d"),ht.dom.image.width=Je.canvasWidth,ht.dom.image.height=Je.canvasHeight,ht.dom.overlay=document.querySelector("canvas.drawingBuffer"),!ht.dom.overlay){ht.dom.overlay=document.createElement("canvas"),ht.dom.overlay.className="drawingBuffer",e&&e.appendChild(ht.dom.overlay);var t=document.createElement("br");t.setAttribute("clear","all"),e&&e.appendChild(t)}ht.ctx.overlay=ht.dom.overlay.getContext("2d"),ht.dom.overlay.width=Je.canvasWidth,ht.dom.overlay.height=Je.canvasHeight}}(),$e=new ze(Je,ht.dom.image),bt(st.numOfWorkers,function(){0===st.numOfWorkers&&ft(),Je.play(),e()})}.bind(this,e))}(t)},CameraAccess:Ee,ImageDebug:c,ImageWrapper:p,ResultCollector:h,get canvas(){return ht},start:function(){var e,t;at&&"LiveStream"===st.inputStream.type?(e=1e3/(st.frequency||60),t=null,et=!1,function r(n){t=t||n,et||(n>=t&&(t+=e,gt()),window.requestAnimationFrame(r))}(performance.now())):gt()},stop:function(){et=!0,bt(0),"LiveStream"===st.inputStream.type&&(Ee.release(),Je.clearEventHandlers())},decodeSingle:function(e,t){var r=this;e=m({inputStream:{type:"ImageStream",sequence:!1,size:800,src:e.src},numOfWorkers:1,locator:{halfSample:!1}},e),this.init(e,function(){f.once("processed",function(e){r.stop(),t.call(null,e)},!0),r.start()})},pause:function(){et=!0},onDetected:function(e){f.subscribe("detected",e)},offDetected:function(e){f.unsubscribe("detected",e)},onProcessed:function(e){f.subscribe("processed",e)},offProcessed:function(e){f.unsubscribe("processed",e)},setReaders:function(e){it?it.setReaders(e):at&&lt.length>0&&lt.forEach(function(t){return t.worker.postMessage({cmd:"setReaders",readers:e})})},registerResultCollector:function(e){e&&"function"==typeof e.addResult&&(ot=e)}};function ft(e){!function(e){tt=e||new p({x:Je.width,y:Je.height});0;nt=[{x:0,y:0},{x:0,y:tt.size.y},{x:tt.size.x,y:tt.size.y},{x:tt.size.x,y:0}],rt=new ct(tt,st.locator)}(e),it=new be(st.decoder,tt)}function dt(){var e=st.inputStream.target;if(e instanceof HTMLElement)return e;var t="string"==typeof e?e:"#interactive.viewport";return document.querySelector(t)}function vt(e,t){e.forEach(function(e){e.x+=t.x,e.y+=t.y})}function _t(e,t){var r=e;if(e&&at){var n=Je.topLeft;0===n.x&&0===n.y||function e(t,r){t.barcodes&&t.barcodes.forEach(function(t){return e(t,r)}),t.line&&vt(t.line,r),t.box&&vt(t.box,r),t.boxes&&t.boxes.forEach(function(e){return vt(e,r)})}(e,n),function(e,t,r,n){t&&ot&&(e.barcodes?e.barcodes.forEach(function(e){var i=e.codeResult;i&&ot.addResult(t,r,n,i)}):e.codeResult&&ot.addResult(t,r,n,e.codeResult))}(e,t,Je.canvasWidth,Je.canvasHeight),r=e.barcodes||e}f.publish("processed",r),function(e){return e&&(!!e.codeResult||e.barcodes&&e.barcodes.some(function(e){return!!e.codeResult}))}(e)&&f.publish("detected",r)}function pt(){var e=st.locate?rt.locate():[[nt[0],nt[1],nt[2],nt[3]]];if(e){var t=it.decodeFromBoundingBoxes(e)||{};t.boxes=e,_t(t,tt.data)}else _t()}function gt(){var e;if(at){if(lt.length>0){if(!(e=lt.find(function(e){return!e.busy})))return;$e.attachData(e.imageData)}else $e.attachData(tt.data);$e.grab()&&(e?(e.busy=!0,e.worker.postMessage({cmd:"process",imageData:e.imageData},[e.imageData.buffer])):pt())}else pt()}function yt(e){var t,r,n=(t=__factorySource__||"",r=new Blob(["(".concat(mt.toString(),")(").concat(t,");")],{type:"text/javascript"}),window.URL.createObjectURL(r)),i={worker:new Worker(n),imageData:new Uint8Array(Je.width*Je.height),busy:!0};i.worker.onmessage=function(t){var r=t.data;"initialized"===r.event?(URL.revokeObjectURL(n),i.busy=!1,i.imageData=new Uint8Array(r.imageData),e(i)):"processed"===r.event?(i.busy=!1,i.imageData=new Uint8Array(r.imageData),_t(r.result,i.imageData)):r.event},i.worker.postMessage({cmd:"init",size:{x:Je.width,y:Je.height},imageData:i.imageData,config:m(st,{inputStream:{target:null}})},[i.imageData.buffer])}function mt(e){var t,r,n=self;!e||(t=e().default)?self.onmessage=function(e){var i=e.data;if("init"===i.cmd){var a=i.config;a.numOfWorkers=0;var o=(r=new t.ImageWrapper({x:i.size.x,y:i.size.y},new Uint8Array(i.imageData))).data;t.init(a,function(){return n.postMessage({event:"initialized",imageData:o},[o.buffer])},r),t.onProcessed(function(e){return n.postMessage({event:"processed",imageData:o,result:e},[o.buffer])})}else"process"===i.cmd?(r.data=new Uint8Array(i.imageData),t.start()):"setReaders"===i.cmd&&t.setReaders(i.readers)}:n.postMessage({event:"error",message:"Quagga could not be created"})}function bt(e,t){var r=e-lt.length;if(0===r)return t&&t();if(r<0)return lt.slice(r).forEach(function(e){e.worker.terminate()}),lt=lt.slice(0,r),t&&t();for(var n=0;n<r;n++)yt(function(r){lt.push(r),lt.length>=e&&t&&t()})}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,