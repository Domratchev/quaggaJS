!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("ndarray"),require("ndarray-linear-interpolate"),require("get-pixels")):"function"==typeof define&&define.amd?define("Quagga",["ndarray","ndarray-linear-interpolate","get-pixels"],t):"object"==typeof exports?exports.Quagga=t(require("ndarray"),require("ndarray-linear-interpolate"),require("get-pixels")):e.Quagga=t(e.ndarray,e["ndarray-linear-interpolate"],e["get-pixels"])}(global,function(e,t,r){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="/",r(r.s=19)}([function(e,t){function r(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e.exports=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function r(t){return e.exports=r=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},r(t)}e.exports=r},function(e,t,r){var n=r(6),i=r(13);e.exports=function(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?i(e):t}},function(e,t,r){var n=r(14);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&n(e,t)}},function(e,t,r){r(2);var n=r(15);function i(t,r,a){return"undefined"!=typeof Reflect&&Reflect.get?e.exports=i=Reflect.get:e.exports=i=function(e,t,r){var i=n(e,t);if(i){var a=Object.getOwnPropertyDescriptor(i,t);return a.get?a.get.call(r):a.value}},i(t,r,a||t)}e.exports=i},function(e,t){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function n(t){return"function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?e.exports=n=function(e){return r(e)}:e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":r(e)},n(t)}e.exports=n},function(e,t,r){var n=r(10),i=r(11),a=r(12);e.exports=function(e){return n(e)||i(e)||a()}},function(e,t){e.exports=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}},function(e,t){Math.imul||(Math.imul=function(e,t){var r=(4194303&e)*(t|=0);return 4290772992
/*!== 0*/&e&&(r+=(4290772992&e)*t|0),0|r})},function(e,t){e.exports=function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}},function(e,t){e.exports=function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t){function r(t,n){return e.exports=r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},r(t,n)}e.exports=r},function(e,t,r){var n=r(2);e.exports=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=n(e)););return e}},function(t,r){t.exports=e},function(e,r){e.exports=t},function(e,t){e.exports=r},function(e,t,r){"use strict";r.r(t);r(9);var n=r(1),i=r.n(n),a=r(0),o=r.n(a),u=function(){function e(){i()(this,e)}return o()(e,null,[{key:"drawRect",value:function(e,t,r,n){r.strokeStyle=n.color,r.fillStyle=n.color,r.lineWidth=n.lineWidth||1,r.beginPath(),r.strokeRect(e.x,e.y,t.x,t.y)}},{key:"drawPath",value:function(e,t,r,n){r.strokeStyle=n.color,r.fillStyle=n.color,r.lineWidth=n.lineWidth,r.beginPath(),r.moveTo(e[0][t.x],e[0][t.y]);for(var i=1;i<e.length;i++)r.lineTo(e[i][t.x],e[i][t.y]);r.closePath(),r.stroke()}},{key:"drawImage",value:function(e,t,r,n){var i=n.getImageData(0,0,t,r),a=i.data,o=e.length,u=a.length;if(u/o!=4)return!1;for(;o--;){var s=e[o];a[--u]=255,a[--u]=s,a[--u]=s,a[--u]=s}return n.putImageData(i,0,0),!0}}]),e}(),s=function(){function e(t){i()(this,e),this._config=t,this._canvas=document.createElement("canvas"),this._context=this._canvas.getContext("2d"),this._results=[],this._capacity=t.capacity||20,this._capture=!0===t.capture}return o()(e,[{key:"_contains",value:function(e,t){return!!t&&t.some(function(t){return Object.keys(t).every(function(r){return t[r]===e[r]})})}},{key:"_passesFilter",value:function(e,t){return"function"!=typeof t||t(e)}},{key:"_matchesConstraints",value:function(e){return e&&this._capacity&&!this._contains(e,this._config.blacklist)&&this._passesFilter(e,this._config.filter)}},{key:"addResult",value:function(e,t,r,n){if(this._matchesConstraints(n)){var i={};this._capacity--,i.codeResult=n,this._capture&&(this._canvas.width=t,this._canvas.height=r,u.drawImage(e,t,r,this._context),i.frame=this._canvas.toDataURL()),this._results.push(i)}}},{key:"getResults",value:function(){return this._results}}]),e}(),c=function(){var e={};function t(t){return e[t]||(e[t]={subscribers:[]}),e[t]}function r(e,t){e.async?setTimeout(function(){e.callback(t)},4):e.callback(t)}function n(e,r,n){var i;if("function"==typeof r)i={callback:r,async:n};else if(!(i=r).callback)throw"Callback was not specified on options";t(e).subscribers.push(i)}return{subscribe:function(e,t,r){return n(e,t,r)},publish:function(e,n){var i=t(e),a=i.subscribers;a.filter(function(e){return!!e.once}).forEach(function(e){return r(e,n)}),i.subscribers=a.filter(function(e){return!e.once}),i.subscribers.forEach(function(e){return r(e,n)})},once:function(e,t,r){n(e,{callback:t,async:r,once:!0})},unsubscribe:function(r,n){if(r){var i=t(r);i.subscribers=i&&n?i.subscribers.filter(function(e){return e.callback!==n}):[]}else e={}}}}();function l(e,t){t||(t=8);var r=8-t,n=function(e,t){t||(t=8);for(var r=e.data,n=8-t,i=new Int32Array(1<<t),a=r.length;a--;)i[r[a]>>n]++;return i}(e,t),i=[0],a=(1<<t)-1;function o(e,t){for(var r=0,i=e;i<=t;i++)r+=n[i];return r}function u(e,t){for(var r=0,i=e;i<=t;i++)r+=i*n[i];return r}for(var s=1;s<a;s++){var c=o(0,s),l=o(s+1,a),h=c*l||1,f=u(0,s)*l-u(s+1,a)*c;i[s]=f*f/h}return i.reduce(function(e,t,r,n){return t>n[e]?r:e},0)<<r}function h(e,t){var r=e[0],n=e[1],i=e[2],a=i*n,o=a*(1-Math.abs(r/60%2-1)),u=i-a,s=0,c=0,l=0;return r<60?(s=a,c=o):r<120?(s=o,c=a):r<180?(c=a,l=o):r<240?(c=o,l=a):r<300?(s=o,l=a):r<360&&(s=a,l=o),(t=t||[0,0,0])[0]=255*(s+u)|0,t[1]=255*(c+u)|0,t[2]=255*(l+u)|0,t}function f(e){for(var t=[],r=[],n=1;n*n<=e;n++)e%n==0&&(r.push(n),n*n!==e&&t.unshift(e/n|0));return r.concat(t)}function d(e,t){var r=0|Math.max(0|t.x,0|t.y),n=[8,10,15,20,32,60,80],i={"x-small":5,small:4,medium:3,large:2,"x-large":1},a=i[e]||0|i.medium,o=0|n[a],u=r/o|0;function s(e){for(var t=0,r=0|e[e.length>>1];t<e.length-1&&e[t]<u;)t++;return t>0&&(r=Math.abs(e[t]-u)>Math.abs(e[t-1]-u)?0|e[t-1]:0|e[t]),u/r<n[a+1]/n[a]&&u/r>n[a-1]/n[a]?{x:r,y:r}:null}return s(function(e,t){if(e===t)return f(e);for(var r=e>t?e:t,n=e>t?t:e,i=[],a=[],o=1;o*o<=n;o++)if(r%o==0&&n%o==0){a.push(o);var u=n/o|0;o!==u&&r%u==0&&i.unshift()}return a.concat(i)}(t.x,t.y))||s(f(r))||s(f(u*o))}var v={top:function(e,t){return"%"===e.unit?t.height*e.value/100|0:t.height},right:function(e,t){return"%"===e.unit?t.width-t.width*e.value/100|0:t.width},bottom:function(e,t){return"%"===e.unit?t.height-t.height*e.value/100|0:t.height},left:function(e,t){return"%"===e.unit?t.width*e.value/100|0:t.width}};function _(e,t,r){var n={width:e,height:t},i=Object.keys(r).reduce(function(e,t){var i=function(e){return{value:parseFloat(e),unit:(e.indexOf("%"),e.length,"%")}}(r[t]),a=v[t](i,n);return e[t]=a,e},{});return{sx:i.left,sy:i.top,sw:i.right-i.left,sh:i.bottom-i.top}}var g=function(){function e(t,r,n,a){i()(this,e),r?this.data=r:(this.data=new(n||Uint8Array)(t.x*t.y),a&&this.data.fill(0)),this.size=t}return o()(e,[{key:"inImageWithBorder",value:function(e,t){return e.x>=t&&e.y>=t&&e.x<this.size.x-t&&e.y<this.size.y-t}},{key:"subImageAsCopy",value:function(e,t,r){for(var n=e.size.y,i=e.size.x,a=0;a<i;a++)for(var o=0;o<n;o++)e.data[o*i+a]=this.data[(r+o)*this.size.x+t+a]}},{key:"get",value:function(e,t){return this.data[t*this.size.x+e]}},{key:"set",value:function(e,t,r){return this.data[t*this.size.x+e]=r,this}},{key:"zeroBorder",value:function(){for(var e=this.size.x,t=this.size.y,r=this.data,n=0;n<e;n++)r[n]=r[(t-1)*e+n]=0;for(var i=1;i<t-1;i++)r[i*e]=r[i*e+(e-1)]=0}},{key:"invert",value:function(){for(var e=this.data,t=e.length;t--;)e[t]=e[t]?0:1}},{key:"moments",value:function(e){var t=this.size.y,r=this.size.x,n=[],i=[];if(e<=0)return i;for(var a=0;a<e;a++)n[a]={m00:0,m01:0,m10:0,m11:0,m02:0,m20:0,theta:0,rad:0};for(var o=0;o<t;o++)for(var u=o*o,s=0;s<r;s++){var c=this.data[o*r+s];if(c>0){var l=n[c-1];l.m00+=1,l.m01+=o,l.m10+=s,l.m11+=s*o,l.m02+=u,l.m20+=s*s}}for(var h=Math.PI,f=h/4,d=0;d<e;d++){var v=n[d];if(!isNaN(v.m00)&&0!==v.m00){var _=v.m10/v.m00,g=v.m01/v.m00,y=v.m11/v.m00-_*g,p=v.m02/v.m00-g*g,m=v.m20/v.m00-_*_,b=.5*Math.atan((p-m)/(2*y))+(y>=0?f:-f)+h;v.theta=(180*b/h+90)%180-90,v.theta<0&&(v.theta+=180),v.rad=b>h?b-h:b,v.x=Math.cos(b),v.y=Math.sin(b),i.push(v)}}return i}},{key:"show",value:function(e,t){var r=this.size.y,n=this.size.x,i=e.getContext("2d");e.height=r,e.width=n;var a=i.getImageData(0,0,n,r),o=a.data,u=0;t||(t=1);for(var s=0;s<r;s++)for(var c=0;c<n;c++){var l=s*n+c;u=this.get(c,s)*t,o[4*l+0]=u,o[4*l+1]=u,o[4*l+2]=u,o[4*l+3]=255}i.putImageData(a,0,0)}},{key:"overlay",value:function(e,t,r,n){var i=[0,1,1],a=[255,255,255],o=[0,0,0],u=e.getContext("2d"),s=u.getImageData(r,n,this.size.x,this.size.y),c=s.data;(!t||t<0||t>360)&&(t=360);for(var l=this.data.length;l--;){i[0]=this.data[l]*t;var f=i[0]<=0?a:i[0]>=360?o:h(i);c[4*l+0]=f[0],c[4*l+1]=f[1],c[4*l+2]=f[2],c[4*l+3]=255}u.putImageData(s,r,n)}}]),e}(),y=r(6),p=r.n(y);function m(){for(var e=function(e){return e&&"object"===p()(e)},t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return r.reduce(function(t,r){return r&&Object.keys(r).forEach(function(n){var i=t[n],a=r[n];Array.isArray(i)&&Array.isArray(a)?t[n]=a:e(i)&&e(a)?t[n]=m(i,a):t[n]=a}),t},{})}var b={inputStream:{type:"ImageStream",sequence:!1,size:800,area:{top:"0%",right:"0%",left:"0%",bottom:"0%"},singleChannel:!1},locate:!0,numOfWorkers:0,decoder:{readers:["code_128_reader"]},locator:{halfSample:!0,patchSize:"medium"}},x=r(7),w=r.n(x),C={},k={UP:1,DOWN:-1};C.getBarcodeLine=function(e,t,r){var n,i,a=0|t.x,o=0|t.y,u=0|r.x,s=0|r.y,c=Math.abs(s-o)>Math.abs(u-a),l=[],h=e.data,f=e.size.x,d=255,v=0;function _(e,t){i=h[t*f+e],d=i<d?i:d,v=i>v?i:v,l.push(i)}c&&(n=a,a=o,o=n,n=u,u=s,s=n),a>u&&(n=a,a=u,u=n,n=o,o=s,s=n);for(var g=u-a,y=Math.abs(s-o),p=g/2|0,m=o,b=o<s?1:-1,x=a;x<u;x++)c?_(m,x):_(x,m),(p-=y)<0&&(m+=b,p+=g);return{line:l,min:d,max:v}},C.toBinaryLine=function(e){var t=e.min,r=e.max,n=e.line,i=t+(r-t)/2,a=[],o=(r-t)/12,u=-o,s=n[0]>i?k.UP:k.DOWN;a.push({pos:0,val:n[0]});for(var c=0;c<n.length-2;c++){var l=n[c+1]-n[c],h=n[c+2]-n[c+1],f=void 0;s!==(f=l+h<u&&n[c+1]<1.5*i?k.DOWN:l+h>o&&n[c+1]>.5*i?k.UP:s)&&(a.push({pos:c,val:n[c]}),s=f)}a.push({pos:n.length,val:n[n.length-1]});for(var d=a[0].pos;d<a[1].pos;d++)n[d]=n[d]>i?0:1;for(var v=1;v<a.length-1;v++){o=a[v+1].val>a[v].val?a[v].val+(a[v+1].val-a[v].val)/3*2|0:a[v+1].val+(a[v].val-a[v+1].val)/3|0;for(var _=a[v].pos;_<a[v+1].pos;_++)n[_]=n[_]>o?0:1}return{line:n,threshold:o}},C.debug={printFrequency:function(e,t){var r=t.getContext("2d");t.width=e.length,t.height=256,r.beginPath(),r.strokeStyle="blue";for(var n=0;n<e.length;n++)r.moveTo(n,255),r.lineTo(n,255-e[n]);r.stroke(),r.closePath()},printPattern:function(e,t){var r=t.getContext("2d");t.width=e.length,r.fillColor="black";for(var n=0;n<e.length;n++)1===e[n]&&r.fillRect(n,0,1,100)}};var E=C,S=r(3),R=r.n(S),A=r(2),P=r.n(A),D=r(4),O=r.n(D),T=1,z=-1,M=function(){function e(t,r){i()(this,e),this._format="unknown",this._row=[],this.config=t||{},this.supplements=r}return o()(e,[{key:"SINGLE_CODE_ERROR",get:function(){return this._singleCodeError}},{key:"AVERAGE_CODE_ERROR",get:function(){return this._averageCodeError}},{key:"FORMAT",get:function(){return this._format}}],[{key:"Exception",get:function(){return{StartNotFoundException:"Start-Info was not found!",CodeNotFoundException:"Code could not be found!",PatternNotFoundException:"Pattern could not be found!"}}}]),o()(e,[{key:"_nextUnset",value:function(e,t){for(var r=t||0;r<e.length;r++)if(!e[r])return r;return e.length}},{key:"_matchPattern",value:function(e,t,r){var n=0,i=0,a=0;r=r||this.SINGLE_CODE_ERROR||1;for(var o=0;o<e.length;o++)i+=e[o],a+=t[o];if(i<a)return Number.MAX_VALUE;var u=i/a;r*=u;for(var s=0;s<e.length;s++){var c=e[s],l=t[s]*u,h=Math.abs(c-l)/l;if(h>r)return Number.MAX_VALUE;n+=h}return n/a}},{key:"_nextSet",value:function(e,t){for(var r=t||0;r<e.length;r++)if(e[r])return r;return e.length}},{key:"_correctBars",value:function(e,t,r){for(var n=r.length,i=0;n--;)(i=e[r[n]]*(1-(1-t)/2))>1&&(e[r[n]]=i)}},{key:"decodePattern",value:function(e){this._row=e;var t=this._decode();return null===t?(this._row.reverse(),(t=this._decode())&&(t.direction=z,t.start=this._row.length-t.start,t.end=this._row.length-t.end)):t.direction=T,t&&(t.format=this.FORMAT),t}},{key:"_matchRange",value:function(e,t,r){for(var n=e<0?0:e;n<t;n++)if(this._row[n]!==r)return!1;return!0}},{key:"_fillCounters",value:function(e,t,r){var n=[],i=0;r=void 0===r||r,e=void 0!==e?e:this._nextUnset(this._row),t=t||this._row.length,n[i]=0;for(var a=e;a<t;a++)this._row[a]^r?n[i]++:(n[++i]=1,r=!r);return n}},{key:"_toCounters",value:function(e,t){var r=t.length,n=this._row.length,i=!this._row[e],a=0;t.fill(0);for(var o=e;o<n;o++)if(this._row[o]^i)t[a]++;else{if(++a===r)break;t[a]=1,i=!i}return t}}]),e}(),I=[[2,1,2,2,2,2],[2,2,2,1,2,2],[2,2,2,2,2,1],[1,2,1,2,2,3],[1,2,1,3,2,2],[1,3,1,2,2,2],[1,2,2,2,1,3],[1,2,2,3,1,2],[1,3,2,2,1,2],[2,2,1,2,1,3],[2,2,1,3,1,2],[2,3,1,2,1,2],[1,1,2,2,3,2],[1,2,2,1,3,2],[1,2,2,2,3,1],[1,1,3,2,2,2],[1,2,3,1,2,2],[1,2,3,2,2,1],[2,2,3,2,1,1],[2,2,1,1,3,2],[2,2,1,2,3,1],[2,1,3,2,1,2],[2,2,3,1,1,2],[3,1,2,1,3,1],[3,1,1,2,2,2],[3,2,1,1,2,2],[3,2,1,2,2,1],[3,1,2,2,1,2],[3,2,2,1,1,2],[3,2,2,2,1,1],[2,1,2,1,2,3],[2,1,2,3,2,1],[2,3,2,1,2,1],[1,1,1,3,2,3],[1,3,1,1,2,3],[1,3,1,3,2,1],[1,1,2,3,1,3],[1,3,2,1,1,3],[1,3,2,3,1,1],[2,1,1,3,1,3],[2,3,1,1,1,3],[2,3,1,3,1,1],[1,1,2,1,3,3],[1,1,2,3,3,1],[1,3,2,1,3,1],[1,1,3,1,2,3],[1,1,3,3,2,1],[1,3,3,1,2,1],[3,1,3,1,2,1],[2,1,1,3,3,1],[2,3,1,1,3,1],[2,1,3,1,1,3],[2,1,3,3,1,1],[2,1,3,1,3,1],[3,1,1,1,2,3],[3,1,1,3,2,1],[3,3,1,1,2,1],[3,1,2,1,1,3],[3,1,2,3,1,1],[3,3,2,1,1,1],[3,1,4,1,1,1],[2,2,1,4,1,1],[4,3,1,1,1,1],[1,1,1,2,2,4],[1,1,1,4,2,2],[1,2,1,1,2,4],[1,2,1,4,2,1],[1,4,1,1,2,2],[1,4,1,2,2,1],[1,1,2,2,1,4],[1,1,2,4,1,2],[1,2,2,1,1,4],[1,2,2,4,1,1],[1,4,2,1,1,2],[1,4,2,2,1,1],[2,4,1,2,1,1],[2,2,1,1,1,4],[4,1,3,1,1,1],[2,4,1,1,1,2],[1,3,4,1,1,1],[1,1,1,2,4,2],[1,2,1,1,4,2],[1,2,1,2,4,1],[1,1,4,2,1,2],[1,2,4,1,1,2],[1,2,4,2,1,1],[4,1,1,2,1,2],[4,2,1,1,1,2],[4,2,1,2,1,1],[2,1,2,1,4,1],[2,1,4,1,2,1],[4,1,2,1,2,1],[1,1,1,1,4,3],[1,1,1,3,4,1],[1,3,1,1,4,1],[1,1,4,1,1,3],[1,1,4,3,1,1],[4,1,1,1,1,3],[4,1,1,3,1,1],[1,1,3,1,4,1],[1,1,4,1,3,1],[3,1,1,1,4,1],[4,1,1,1,3,1],[2,1,1,4,1,2],[2,1,1,2,1,4],[2,1,1,2,3,2],[2,3,3,1,1,1,2]],W=[0,2,4],U=[1,3,5],N=function(e){function t(){var e;return i()(this,t),(e=R()(this,P()(t).call(this)))._format="code_128",e._singleCodeError=.64,e._averageCodeError=.3,e}return O()(t,e),o()(t,[{key:"_decodeCode",value:function(e,t){for(var r=[0,0,0,0,0,0],n=e,i={error:Number.MAX_VALUE,code:-1,start:e,end:e,correction:{bar:1,space:1}},a=this.AVERAGE_CODE_ERROR,o=!this._row[n],u=0,s=n;s<this._row.length;s++)if(this._row[s]^o)r[u]++;else{if(u===r.length-1){t&&this._correct(r,t);for(var c=0;c<I.length;c++){var l=this._matchPattern(r,I[c]);l<i.error&&(i.code=c,i.error=l)}if(i.end=s,-1===i.code||i.error>a)return null;var h=I[i.code];return h&&(i.correction.bar=this.calculateCorrection(h,r,W),i.correction.space=this.calculateCorrection(h,r,U)),i}r[++u]=1,o=!o}return null}},{key:"_correct",value:function(e,t){this._correctBars(e,t.bar,W),this._correctBars(e,t.space,U)}},{key:"_findStart",value:function(){for(var e,t=[0,0,0,0,0,0],r=this._nextSet(this._row),n={error:Number.MAX_VALUE,code:-1,start:0,end:0,correction:{bar:1,space:1}},i=this.AVERAGE_CODE_ERROR,a=!1,o=0,u=r;u<this._row.length;u++)if(this._row[u]^a)t[o]++;else{if(o===t.length-1){e=0;for(var s=0;s<t.length;s++)e+=t[s];for(var c=103;c<=105;c++){var l=this._matchPattern(t,I[c]);l<n.error&&(n.code=c,n.error=l)}if(n.error<i)return n.start=u-e,n.end=u,n.correction.bar=this.calculateCorrection(I[n.code],t,W),n.correction.space=this.calculateCorrection(I[n.code],t,U),n;for(var h=0;h<4;h++)t[h]=t[h+2];t[4]=0,t[5]=0,o--}else o++;t[o]=1,a=!a}return null}},{key:"_decode",value:function(){var e,t,r=[],n=this._findStart(),i=null,a=!1,o=0,u=0,s=[],c=[],l=!1,h=!0;if(null===n)return null;switch(i={code:n.code,start:n.start,end:n.end,correction:{bar:n.correction.bar,space:n.correction.space}},c.push(i),u=i.code,i.code){case 103:e=101;break;case 104:e=100;break;case 105:e=99;break;default:return null}for(;!a;){if(t=l,l=!1,null!==(i=this._decodeCode(i.end,i.correction)))switch(106!==i.code&&(h=!0),106!==i.code&&(s.push(i.code),u+=++o*i.code),c.push(i),e){case 101:if(i.code<64)r.push(String.fromCharCode(32+i.code));else if(i.code<96)r.push(String.fromCharCode(i.code-64));else switch(106!==i.code&&(h=!1),i.code){case 98:l=!0,e=100;break;case 100:e=100;break;case 99:e=99;break;case 106:a=!0}break;case 100:if(i.code<96)r.push(String.fromCharCode(32+i.code));else switch(106!==i.code&&(h=!1),i.code){case 98:l=!0,e=101;break;case 101:e=101;break;case 99:e=99;break;case 106:a=!0}break;case 99:if(i.code<100)r.push(i.code<10?"0"+i.code:i.code);else switch(106!==i.code&&(h=!1),i.code){case 101:e=101;break;case 100:e=100;break;case 106:a=!0}}else a=!0;t&&(e=101===e?100:101)}return null===i?null:(i.end=this._nextUnset(this._row,i.end),this._verifyTrailingWhitespace(i)?(u-=o*s[s.length-1])%103!==s[s.length-1]?null:r.length?(h&&r.splice(r.length-1,1),{code:r.join(""),start:n.start,end:i.end,codeset:e,startInfo:n,decodedCodes:c,endInfo:i}):null:null)}},{key:"_verifyTrailingWhitespace",value:function(e){var t=e.end+(e.end-e.start)/2;return t<this._row.length&&this._matchRange(e.end,t,0)?e:null}},{key:"calculateCorrection",value:function(e,t,r){for(var n=0,i=0,a=r.length;a--;)i+=e[r[a]],n+=t[r[a]];return i/n}}]),t}(M),j=w()("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. *$/+%").map(function(e){return e.charCodeAt(0)}),L=[52,289,97,352,49,304,112,37,292,100,265,73,328,25,280,88,13,268,76,28,259,67,322,19,274,82,7,262,70,22,385,193,448,145,400,208,133,388,196,148,168,162,138,42],B=function(e){function t(){var e;return i()(this,t),(e=R()(this,P()(t).call(this)))._format="code_39",e}return O()(t,e),o()(t,[{key:"_decode",value:function(){var e=this._findStart();if(!e)return null;var t,r,n=[],i=[0,0,0,0,0,0,0,0,0],a=this._nextSet(this._row,e.end);do{i=this._toCounters(a,i);var o=this._toPattern(i);if(o<0)return null;if((t=this._patternToChar(o))<0)return null;n.push(t),r=a,a+=i.reduce(function(e,t){return e+t},0),a=this._nextSet(this._row,a)}while("*"!==t);return n.pop(),n.length&&this._verifyTrailingWhitespace(r,a,i)?{code:n.join(""),start:e.start,end:a,startInfo:e,decodedCodes:n}:null}},{key:"_verifyTrailingWhitespace",value:function(e,t,r){var n=r.reduce(function(e,t){return e+t},0);return 3*(t-e-n)>=n}},{key:"_patternToChar",value:function(e){for(var t=0;t<L.length;t++)if(L[t]===e)return String.fromCharCode(j[t]);return-1}},{key:"_findNextWidth",value:function(e,t){for(var r=Number.MAX_VALUE,n=0;n<e.length;n++)e[n]<r&&e[n]>t&&(r=e[n]);return r}},{key:"_toPattern",value:function(e){for(var t,r=e.length,n=0,i=r,a=0;i>3;){n=this._findNextWidth(e,n),i=0,t=0;for(var o=0;o<r;o++)e[o]>n&&(t|=1<<r-1-o,i++,a+=e[o]);if(3===i){for(var u=0;u<r&&i>0;u++)if(e[u]>n&&(i--,2*e[u]>=a))return-1;return t}}return-1}},{key:"_findStart",value:function(){for(var e,t=this._nextSet(this._row),r=t,n=[0,0,0,0,0,0,0,0,0],i=0,a=!1,o=t;o<this._row.length;o++)if(this._row[o]^a)n[i]++;else{if(i===n.length-1){if(148===this._toPattern(n)&&(e=0|Math.max(0,r-(o-r)/4),this._matchRange(e,r,0)))return{start:r,end:o};r+=n[0]+n[1];for(var u=0;u<7;u++)n[u]=n[u+2];n[7]=0,n[8]=0,i--}else i++;n[i]=1,a=!a}return null}}]),t}(M),V=r(5),F=r.n(V),G=function(e){function t(){var e;return i()(this,t),(e=R()(this,P()(t).call(this)))._format="code_39_vin",e}return O()(t,e),o()(t,[{key:"_decode",value:function(){var e=F()(P()(t.prototype),"_decode",this).call(this);if(!e)return null;var r=e.code;return r?(r=r.replace(/[IOQ]/g,""),/[A-Z0-9]{17}/.test(r)&&this._checkChecksum(r)?(e.code=r,e):null):null}},{key:"_checkChecksum",value:function(e){return!!e}}]),t}(B),H=w()("0123456789-$:/.+ABCD").map(function(e){return e.charCodeAt(0)}),X=[3,6,9,96,18,66,33,36,48,72,12,24,69,81,84,21,26,41,11,14],q=[26,41,11,14],Q=function(e){function t(){var e;return i()(this,t),(e=R()(this,P()(t).call(this)))._format="codabar",e._counters=[],e}return O()(t,e),o()(t,[{key:"_decode",value:function(){this._counters=this._fillCounters();var e=this._findStart();if(!e)return null;var t,r=[],n=e.startCounter;do{if((t=this._toPattern(n))<0)return null;var i=this._patternToChar(t);if(i<0)return null;if(r.push(i),n+=8,r.length>1&&q.some(function(e){return e===t}))break}while(n<this._counters.length);if(r.length-2<4||!q.some(function(e){return e===t}))return null;if(!this._verifyWhitespace(e.startCounter,n-8))return null;if(!this._validateResult(r,e.startCounter))return null;n=n>this._counters.length?this._counters.length:n;var a=e.start+this._sumCounters(e.startCounter,n-8);return{code:r.join(""),start:e.start,end:a,startInfo:e,decodedCodes:r}}},{key:"_verifyWhitespace",value:function(e,t){return(e-1<=0||this._counters[e-1]>=this._calculatePatternLength(e)/2)&&(t+8>=this._counters.length||this._counters[t+7]>=this._calculatePatternLength(t)/2)}},{key:"_calculatePatternLength",value:function(e){for(var t=0,r=e;r<e+7;r++)t+=this._counters[r];return t}},{key:"_thresholdResultPattern",value:function(e,t){for(var r={space:{narrow:{size:0,counts:0,min:0,max:Number.MAX_VALUE},wide:{size:0,counts:0,min:0,max:Number.MAX_VALUE}},bar:{narrow:{size:0,counts:0,min:0,max:Number.MAX_VALUE},wide:{size:0,counts:0,min:0,max:Number.MAX_VALUE}}},n=t,i=0;i<e.length;i++){for(var a=this._charToPattern(e[i]),o=6;o>=0;o--){var u=2==(1&o)?r.bar:r.space,s=1==(1&a)?u.wide:u.narrow;s.size+=this._counters[n+o],s.counts++,a>>=1}n+=8}return["space","bar"].forEach(function(e){var t=r[e];t.wide.min=Math.floor((t.narrow.size/t.narrow.counts+t.wide.size/t.wide.counts)/2),t.narrow.max=Math.ceil(t.wide.min),t.wide.max=Math.ceil((2*t.wide.size+1.5)/t.wide.counts)}),r}},{key:"_charToPattern",value:function(e){for(var t=e.charCodeAt(0),r=0;r<H.length;r++)if(H[r]===t)return X[r];return 0}},{key:"_validateResult",value:function(e,t){for(var r=this._thresholdResultPattern(e,t),n=t,i=0;i<e.length;i++){for(var a=this._charToPattern(e[i]),o=6;o>=0;o--){var u=0==(1&o)?r.bar:r.space,s=1==(1&a)?u.wide:u.narrow,c=this._counters[n+o];if(c<s.min||c>s.max)return!1;a>>=1}n+=8}return!0}},{key:"_patternToChar",value:function(e){for(var t=0;t<X.length;t++)if(X[t]===e)return String.fromCharCode(H[t]);return-1}},{key:"_computeAlternatingThreshold",value:function(e,t){for(var r=Number.MAX_VALUE,n=0,i=e;i<t;i+=2){var a=this._counters[i];a>n&&(n=a),a<r&&(r=a)}return(r+n)/2|0}},{key:"_toPattern",value:function(e){var t=e+7;if(t>this._counters.length)return-1;for(var r=this._computeAlternatingThreshold(e,t),n=this._computeAlternatingThreshold(e+1,t),i=64,a=0,o=0;o<7;o++){var u=0==(1&o)?r:n;this._counters[e+o]>u&&(a|=i),i>>=1}return a}},{key:"_sumCounters",value:function(e,t){for(var r=0,n=e;n<t;n++)r+=this._counters[n];return r}},{key:"_findStart",value:function(){for(var e=this,t=this._nextUnset(this._row),r=function(r){var n=e._toPattern(r);if(-1!==n&&q.some(function(e){return e===n})){var i=(t+=e._sumCounters(0,r))+e._sumCounters(r,r+8);return{v:{start:t,end:i,startCounter:r,endCounter:r+8}}}},n=1;n<this._counters.length;n++){var i=r(n);if("object"===p()(i))return i.v}return null}}]),t}(M),Y=r(8),Z=r.n(Y);function K(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}var J,$=[1,1,2],ee=[[3,2,1,1],[2,2,2,1],[2,1,2,2],[1,4,1,1],[1,1,3,2],[1,2,3,1],[1,1,1,4],[1,3,1,2],[1,2,1,3],[3,1,1,2],[1,1,2,3],[1,2,2,2],[2,2,1,2],[1,1,4,1],[2,3,1,1],[1,3,2,1],[4,1,1,1],[2,1,3,1],[3,1,2,1],[2,1,1,3]],te=function(e){function t(e,r){var n;return i()(this,t),(n=R()(this,P()(t).call(this,m({supplements:[]},e),r)))._format="ean_13",n._singleCodeError=.7,n._averageCodeError=.48,n}return O()(t,e),o()(t,[{key:"CODE_L_START",get:function(){return 0}},{key:"CODE_G_START",get:function(){return 10}},{key:"START_PATTERN",get:function(){return[1,1,1]}},{key:"STOP_PATTERN",get:function(){return[1,1,1]}},{key:"MIDDLE_PATTERN",get:function(){return[1,1,1,1,1]}},{key:"CODE_FREQUENCY",get:function(){return[0,11,13,14,19,25,28,21,22,26]}}]),o()(t,[{key:"_decodeCode",value:function(e,t){var r=[0,0,0,0],n=e,i={error:Number.MAX_VALUE,code:-1,start:e,end:e},a=this.AVERAGE_CODE_ERROR,o=!this._row[n],u=0;t||(t=ee.length);for(var s=n;s<this._row.length;s++)if(this._row[s]^o)r[u]++;else{if(u===r.length-1){for(var c=0;c<t;c++){var l=this._matchPattern(r,ee[c]);l<i.error&&(i.code=c,i.error=l)}return i.end=s,i.error>a?null:i}r[++u]=1,o=!o}return null}},{key:"_findPattern",value:function(e,t,r,n,i){var a,o=[],u={error:Number.MAX_VALUE,code:-1,start:0,end:0},s=0;t||(t=this._nextSet(this._row)),void 0===r&&(r=!1),void 0===n&&(n=!0),void 0===i&&(i=this.AVERAGE_CODE_ERROR);for(var c=0;c<e.length;c++)o[c]=0;for(var l=t;l<this._row.length;l++)if(this._row[l]^r)o[s]++;else{if(s===o.length-1){a=0;for(var h=0;h<o.length;h++)a+=o[h];var f=this._matchPattern(o,e);if(f<i)return u.error=f,u.start=l-a,u.end=l,u;if(!n)return null;for(var d=0;d<o.length-2;d++)o[d]=o[d+2];o[o.length-2]=0,o[o.length-1]=0,s--}else s++;o[s]=1,r=!r}return null}},{key:"_findStart",value:function(){for(var e,t=this._nextSet(this._row);!e;){if(!(e=this._findPattern(this.START_PATTERN,t)))return null;var r=e.start-(e.end-e.start);if(r>=0&&this._matchRange(r,e.start,0))return e;t=e.end,e=null}return null}},{key:"_verifyTrailingWhitespace",value:function(e){var t=e.end+(e.end-e.start);return t<this._row.length&&this._matchRange(e.end,t,0)?e:null}},{key:"_findEnd",value:function(e,t){var r=this._findPattern(this.STOP_PATTERN,e,t,!1);return null!==r?this._verifyTrailingWhitespace(r):null}},{key:"_calculateFirstDigit",value:function(e){for(var t=0;t<this.CODE_FREQUENCY.length;t++)if(e===this.CODE_FREQUENCY[t])return t;return null}},{key:"_decodePayload",value:function(e,t,r){for(var n=0,i=0;i<6;i++){if(!(e=this._decodeCode(e.end)))return null;e.code>=this.CODE_G_START?(e.code-=this.CODE_G_START,n|=1<<5-i):n|=0<<5-i,t.push(e.code),r.push(e)}var a=this._calculateFirstDigit(n);if(null===a)return null;if(t.unshift(a),null===(e=this._findPattern(this.MIDDLE_PATTERN,e.end,!0,!1)))return null;r.push(e);for(var o=0;o<6;o++){if(!(e=this._decodeCode(e.end,this.CODE_G_START)))return null;r.push(e),t.push(e.code)}return e}},{key:"_decode",value:function(){var e=[],t=[],r={},n=this._findStart();if(!n)return null;var i={code:n.code,start:n.start,end:n.end};if(t.push(i),!(i=this._decodePayload(i,e,t)))return null;if(!(i=this._findEnd(i.end,!1)))return null;if(t.push(i),!this._checksum(e))return null;if(this.supplements.length>0){var a=this._decodeExtensions(i.end);if(!a)return null;var o=a.decodedCodes[a.decodedCodes.length-1],u={start:o.start+((o.end-o.start)/2|0),end:o.end};if(!this._verifyTrailingWhitespace(u))return null;r={supplement:a,code:e.join("")+a.code}}return function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?K(r,!0).forEach(function(t){Z()(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):K(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}({code:e.join(""),start:n.start,end:i.end,codeset:"",startInfo:n,decodedCodes:t},r)}},{key:"_decodeExtensions",value:function(e){var t=this._nextSet(this._row,e),r=this._findPattern($,t,!1,!1);if(null===r)return null;for(var n=0;n<this.supplements.length;n++){var i=this.supplements[n].decode(this._row,r.end);if(null!==i)return{code:i.code,start:t,startInfo:r,end:i.end,codeset:"",decodedCodes:i.decodedCodes}}return null}},{key:"_checksum",value:function(e){for(var t=0,r=e.length-2;r>=0;r-=2)t+=e[r];t*=3;for(var n=e.length-1;n>=0;n-=2)t+=e[n];return t%10==0}}]),t}(M),re=function(e){function t(e,r){var n;return i()(this,t),(n=R()(this,P()(t).call(this,e,r)))._format="ean_8",n}return O()(t,e),o()(t,[{key:"_decodePayload",value:function(e,t,r){for(var n=0;n<4;n++){if(!(e=this._decodeCode(e.end,this.CODE_G_START)))return null;t.push(e.code),r.push(e)}if(null===(e=this._findPattern(this.MIDDLE_PATTERN,e.end,!0,!1)))return null;r.push(e);for(var i=0;i<4;i++){if(!(e=this._decodeCode(e.end,this.CODE_G_START)))return null;r.push(e),t.push(e.code)}return e}}]),t}(te),ne=function(e){function t(e,r){var n;return i()(this,t),(n=R()(this,P()(t).call(this,e,r)))._format="ean_2",n}return O()(t,e),o()(t,[{key:"decode",value:function(e,t){var r,n=e.length,i=[],a=[],o=t,u=0;this._row=e;for(var s=0;s<2&&o<n;s++){if(!(r=this._decodeCode(o)))return null;a.push(r),i.push(r.code%10),r.code>=this.CODE_G_START&&(u|=1<<1-s),1!==s&&(o=this._nextSet(this._row,r.end),o=this._nextUnset(this._row,o))}return 2!==i.length||parseInt(i.join(""))%4!==u?null:{code:i.join(""),decodedCodes:a,end:r.end}}}]),t}(te),ie=function(e){function t(e,r){var n;return i()(this,t),(n=R()(this,P()(t).call(this,e,r)))._format="ean_5",n}return O()(t,e),o()(t,[{key:"CHECK_DIGIT_ENCODINGS",get:function(){return[24,20,18,17,12,6,3,10,9,5]}}]),o()(t,[{key:"decode",value:function(e,t){var r,n=e.length,i=[],a=[],o=0,u=t;this._row=e;for(var s=0;s<5&&u<n;s++){if(!(r=this._decodeCode(u)))return null;a.push(r),i.push(r.code%10),r.code>=this.CODE_G_START&&(o|=1<<4-s),4!==s&&(u=this._nextSet(this._row,r.end),u=this._nextUnset(this._row,u))}return 5!==i.length?null:this._extensionChecksum(i)!==this._determineCheckDigit(o)?null:{code:i.join(""),decodedCodes:a,end:r.end}}},{key:"_determineCheckDigit",value:function(e){for(var t=0;t<10;t++)if(e===this.CHECK_DIGIT_ENCODINGS[t])return t;return null}},{key:"_extensionChecksum",value:function(e){for(var t=e.length,r=0,n=t-2;n>=0;n-=2)r+=e[n];r*=3;for(var i=t-1;i>=0;i-=2)r+=e[i];return(r*=3)%10}}]),t}(te),ae=function(e){function t(e,r){var n;return i()(this,t),(n=R()(this,P()(t).call(this,e,r)))._format="upc_a",n}return O()(t,e),o()(t,[{key:"_decode",value:function(){var e=F()(P()(t.prototype),"_decode",this).call(this);return e&&e.code&&13===e.code.length&&"0"===e.code.charAt(0)?(e.code=e.code.substring(1),e):null}}]),t}(te),oe=function(e){function t(e,r){var n;return i()(this,t),(n=R()(this,P()(t).call(this,e,r)))._format="upc_e",n}return O()(t,e),o()(t,[{key:"CODE_FREQUENCY",get:function(){return[[56,52,50,49,44,38,35,42,41,37],[7,11,13,14,19,25,28,21,22,26]]}},{key:"STOP_PATTERN",get:function(){return[1/6*7,1/6*7,1/6*7,1/6*7,1/6*7,1/6*7]}}]),o()(t,[{key:"_decodePayload",value:function(e,t,r){for(var n=0,i=0;i<6;i++){if(!(e=this._decodeCode(e.end)))return null;e.code>=this.CODE_G_START&&(e.code=e.code-this.CODE_G_START,n|=1<<5-i),t.push(e.code),r.push(e)}return this._determineParity(n,t)?e:null}},{key:"_determineParity",value:function(e,t){for(var r=0;r<this.CODE_FREQUENCY.length;r++)for(var n=0;n<this.CODE_FREQUENCY[r].length;n++)if(e===this.CODE_FREQUENCY[r][n])return t.unshift(r),t.push(n),!0;return!1}},{key:"_convertToUPCA",value:function(e){var t=e[e.length-2],r=[e[0]];return(r=t<=2?r.concat(e.slice(1,3)).concat([t,0,0,0,0]).concat(e.slice(3,6)):3===t?r.concat(e.slice(1,4)).concat([0,0,0,0,0]).concat(e.slice(4,6)):4===t?r.concat(e.slice(1,5)).concat([0,0,0,0,0,e[5]]):r.concat(e.slice(1,6)).concat([0,0,0,0,t])).push(e[e.length-1]),r}},{key:"_checksum",value:function(e){return F()(P()(t.prototype),"_checksum",this).call(this,this._convertToUPCA(e))}},{key:"_findEnd",value:function(e,r){return!0,F()(P()(t.prototype),"_findEnd",this).call(this,e,!0)}},{key:"_verifyTrailingWhitespace",value:function(e){var t=e.end+(e.end-e.start)/2;return t<this._row.length&&this._matchRange(e.end,t,0)?e:null}}]),t}(te),ue=[1,1,1,1],se=[1,1,3],ce=[[1,1,3,3,1],[3,1,1,1,3],[1,3,1,1,3],[3,3,1,1,1],[1,1,3,1,3],[3,1,3,1,1],[1,3,3,1,1],[1,1,1,3,3],[3,1,1,3,1],[1,3,1,3,1]],le=function(e){function t(e){var r;return i()(this,t),(r=R()(this,P()(t).call(this,m({normalizeBarSpaceWidth:!1},e))))._format="i2of5",r._barSpaceRatio=[1,1],r.config.normalizeBarSpaceWidth?(r._singleCodeError=.38,r._averageCodeError=.09):(r._singleCodeError=.78,r._averageCodeError=.38),r}return O()(t,e),o()(t,[{key:"_matchPattern",value:function(e,r){if(this.config.normalizeBarSpaceWidth){for(var n=[0,0],i=[0,0],a=[0,0],o=0;o<e.length;o++)n[o%2]+=e[o],i[o%2]+=r[o];a[0]=i[0]/n[0],a[1]=i[1]/n[1],a[0]=Math.max(Math.min(a[0],5),.2),a[1]=Math.max(Math.min(a[1],5),.2),this._barSpaceRatio=a;for(var u=0;u<e.length;u++)e[u]*=this._barSpaceRatio[u%2]}return F()(P()(t.prototype),"_matchPattern",this).call(this,e,r)}},{key:"_findPattern",value:function(e,t,r,n){var i=[],a={error:Number.MAX_VALUE,code:-1,start:0,end:0},o=this.AVERAGE_CODE_ERROR,u=0;r=r||!1,n=n||!1,t||(t=this._nextSet(this._row));for(var s=0;s<e.length;s++)i[s]=0;for(var c=t;c<this._row.length;c++)if(this._row[c]^r)i[u]++;else{if(u===i.length-1){for(var l=0,h=0;h<i.length;h++)l+=i[h];var f=this._matchPattern(i,e);if(f<o)return a.error=f,a.start=c-l,a.end=c,a;if(!n)return null;for(var d=0;d<i.length-2;d++)i[d]=i[d+2];i[i.length-2]=0,i[i.length-1]=0,u--}else u++;i[u]=1,r=!r}return null}},{key:"_findStart",value:function(){for(var e,t=this._nextSet(this._row);!e;){if(!(e=this._findPattern(ue,t,!1,!0)))return null;var r=e.end-e.start>>2,n=e.start-10*r;if(n>=0&&this._matchRange(n,e.start,0))return e;t=e.end,e=null}return null}},{key:"_verifyTrailingWhitespace",value:function(e){var t=e.end+(e.end-e.start)/2;return t<this._row.length&&this._matchRange(e.end,t,0)?e:null}},{key:"_findEnd",value:function(){this._row.reverse();var e=this._findPattern(se);if(this._row.reverse(),null===e)return null;var t=e.start;return e.start=this._row.length-e.end,e.end=this._row.length-t,null!==e?this._verifyTrailingWhitespace(e):null}},{key:"_decodePair",value:function(e){for(var t=[],r=0;r<e.length;r++){var n=this._decodeCode(e[r]);if(!n)return null;t.push(n)}return t}},{key:"_decodeCode",value:function(e){for(var t={error:Number.MAX_VALUE,code:-1,start:0,end:0},r=0;r<ce.length;r++){var n=this._matchPattern(e,ce[r]);n<t.error&&(t.code=r,t.error=n)}return t.error<this.AVERAGE_CODE_ERROR?t:null}},{key:"_decodePayload",value:function(e,t,r){for(var n,i=e.length,a=[[0,0,0,0,0],[0,0,0,0,0]],o=0;o<i;){for(var u=0;u<5;u++)a[0][u]=e[o]*this._barSpaceRatio[0],a[1][u]=e[o+1]*this._barSpaceRatio[1],o+=2;if(!(n=this._decodePair(a)))return null;for(var s=0;s<n.length;s++)t.push(n[s].code+""),r.push(n[s])}return n}},{key:"_decode",value:function(){var e=this._findStart();if(!e)return null;var t=this._findEnd();if(!t)return null;var r=[];r.push(e);var n=this._fillCounters(e.end,t.start,!1);if(n.length%10!=0)return null;var i=[];return!this._decodePayload(n,i,r)||i.length%2!=0||i.length<6?null:(r.push(t),{code:i.join(""),start:e.start,end:t.end,startInfo:e,decodedCodes:r})}}]),t}(M),he=[3,1,3,1,1,1],fe=[3,1,1,1,3],de=[[1,1,3,3,1],[3,1,1,1,3],[1,3,1,1,3],[3,3,1,1,1],[1,1,3,1,3],[3,1,3,1,1],[1,3,3,1,1],[1,1,1,3,3],[3,1,1,3,1],[1,3,1,3,1]],ve=he.reduce(function(e,t){return e+t},0),_e=function(e){function t(e){var r;return i()(this,t),(r=R()(this,P()(t).call(this,e)))._barSpaceRatio=[1,1],r._format="2of5",r._singleCodeError=.78,r._averageCodeError=.3,r}return O()(t,e),o()(t,[{key:"_findPattern",value:function(e,t,r,n){var i=[],a={error:Number.MAX_VALUE,code:-1,start:0,end:0},o=this.AVERAGE_CODE_ERROR,u=0;r=r||!1,n=n||!1,t||(t=this._nextSet(this._row));for(var s=0;s<e.length;s++)i[s]=0;for(var c=t;c<this._row.length;c++)if(this._row[c]^r)i[u]++;else{if(u===i.length-1){for(var l=0,h=0;h<i.length;h++)l+=i[h];var f=this._matchPattern(i,e);if(f<o)return a.error=f,a.start=c-l,a.end=c,a;if(!n)return null;for(var d=0;d<i.length-2;d++)i[d]=i[d+2];i[i.length-2]=0,i[i.length-1]=0,u--}else u++;i[u]=1,r=!r}return null}},{key:"_findStart",value:function(){for(var e,t=this._nextSet(this._row),r=1;!e;){if(!(e=this._findPattern(he,t,!1,!0)))return null;r=(e.end-e.start)/ve|0;var n=e.start-5*r;if(n>=0&&this._matchRange(n,e.start,0))return e;t=e.end,e=null}return null}},{key:"_verifyTrailingWhitespace",value:function(e){var t=e.end+(e.end-e.start)/2;return t<this._row.length&&this._matchRange(e.end,t,0)?e:null}},{key:"_findEnd",value:function(){this._row.reverse();var e=this._nextSet(this._row),t=this._findPattern(fe,e,!1,!0);if(this._row.reverse(),null===t)return null;var r=t.start;return t.start=this._row.length-t.end,t.end=this._row.length-r,null!==t?this._verifyTrailingWhitespace(t):null}},{key:"_decodeCode",value:function(e){for(var t={error:Number.MAX_VALUE,code:-1,start:0,end:0},r=0;r<de.length;r++){var n=this._matchPattern(e,de[r]);n<t.error&&(t.code=r,t.error=n)}return t.error<this.AVERAGE_CODE_ERROR?t:null}},{key:"_decodePayload",value:function(e,t,r){for(var n,i=e.length,a=[0,0,0,0,0],o=0;o<i;){for(var u=0;u<5;u++)a[u]=e[o]*this._barSpaceRatio[0],o+=2;if(!(n=this._decodeCode(a)))return null;t.push(n.code+""),r.push(n)}return n}},{key:"_decode",value:function(){var e=this._findStart();if(!e)return null;var t=this._findEnd();if(!t)return null;var r=this._fillCounters(e.end,t.start,!1);if(r.length%10!=0)return null;var n=[],i=[];return i.push(e),!this._decodePayload(r,n,i)||n.length<5?null:(i.push(t),{code:n.join(""),start:e.start,end:t.end,startInfo:e,decodedCodes:i})}}]),t}(M),ge=w()("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%abcd*").map(function(e){return e.charCodeAt(0)}),ye=[276,328,324,322,296,292,290,336,274,266,424,420,418,404,402,394,360,356,354,308,282,344,332,326,300,278,436,434,428,422,406,410,364,358,310,314,302,468,466,458,366,374,430,294,474,470,306,350],pe={code_128_reader:N,ean_reader:te,ean_5_reader:ie,ean_2_reader:ne,ean_8_reader:re,code_39_reader:B,code_39_vin_reader:G,codabar_reader:Q,upc_reader:ae,upc_e_reader:oe,i2of5_reader:le,"2of5_reader":_e,code_93_reader:function(e){function t(){var e;return i()(this,t),(e=R()(this,P()(t).call(this)))._format="code_93",e}return O()(t,e),o()(t,[{key:"_decode",value:function(){var e=this._findStart();if(!e)return null;var t,r,n=[],i=[0,0,0,0,0,0],a=this._nextSet(this._row,e.end);do{i=this._toCounters(a,i);var o=this._toPattern(i);if(o<0)return null;if((t=this._patternToChar(o))<0)return null;n.push(t),r=a,a+=i.reduce(function(e,t){return e+t},0),a=this._nextSet(this._row,a)}while("*"!==t);return n.pop(),n.length&&this._verifyEnd(r,a,i)&&this._verifyChecksums(n)?(n=n.slice(0,n.length-2),null===(n=this._decodeExtended(n))?null:{code:n.join(""),start:e.start,end:a,startInfo:e,decodedCodes:n}):null}},{key:"_verifyEnd",value:function(e,t){return!(e===t||!this._row[t])}},{key:"_patternToChar",value:function(e){for(var t=0;t<ye.length;t++)if(ye[t]===e)return String.fromCharCode(ge[t]);return-1}},{key:"_toPattern",value:function(e){for(var t=e.length,r=0,n=0,i=0;i<t;i++)n+=e[i];for(var a=0;a<t;a++){var o=Math.round(9*e[a]/n);if(o<1||o>4)return-1;if(0==(1&a))for(var u=0;u<o;u++)r=r<<1|1;else r<<=o}return r}},{key:"_findStart",value:function(){for(var e,t=[0,0,0,0,0,0],r=this._nextSet(this._row),n=r,i=0,a=!1,o=r;o<this._row.length;o++)if(this._row[o]^a)t[i]++;else{if(i===t.length-1){if(350===this._toPattern(t)&&(e=0|Math.max(0,n-(o-n)/4),this._matchRange(e,n,0)))return{start:n,end:o};n+=t[0]+t[1];for(var u=0;u<4;u++)t[u]=t[u+2];t[4]=0,t[5]=0,i--}else i++;t[i]=1,a=!a}return null}},{key:"_decodeExtended",value:function(e){for(var t=e.length,r=[],n=0;n<t;n++){var i=e[n];if(i>="a"&&i<="d"){if(n>t-2)return null;var a=e[++n],o=a.charCodeAt(0),u=void 0;switch(i){case"a":if(!(a>="A"&&a<="Z"))return null;u=String.fromCharCode(o-64);break;case"b":if(a>="A"&&a<="E")u=String.fromCharCode(o-38);else if(a>="F"&&a<="J")u=String.fromCharCode(o-11);else if(a>="K"&&a<="O")u=String.fromCharCode(o+16);else if(a>="P"&&a<="S")u=String.fromCharCode(o+43);else{if(!(a>="T"&&a<="Z"))return null;u=String.fromCharCode(127)}break;case"c":if(a>="A"&&a<="O")u=String.fromCharCode(o-32);else{if("Z"!==a)return null;u=":"}break;case"d":if(!(a>="A"&&a<="Z"))return null;u=String.fromCharCode(o+32)}r.push(u)}else r.push(i)}return r}},{key:"_verifyChecksums",value:function(e){return this._matchCheckChar(e,e.length-2,20)&&this._matchCheckChar(e,e.length-1,15)}},{key:"_matchCheckChar",value:function(e,t,r){var n=e.slice(0,t),i=n.length,a=n.reduce(function(e,t,n){return e+((-1*n+(i-1))%r+1)*ge.indexOf(t.charCodeAt(0))},0);return ge[a%47]===e[t].charCodeAt(0)}}]),t}(M)},me=function(){function e(t,r){i()(this,e),this._config=t,this._inputImageWrapper=r,this._canvas={ctx:{frequency:null,pattern:null,overlay:null},dom:{frequency:null,pattern:null,overlay:null}},this._barcodeReaders=[],this._initCanvas(),this._initReaders(),this._initConfig()}return o()(e,[{key:"_initCanvas",value:function(){}},{key:"_initReaders",value:function(){var e=this;this._config.readers.forEach(function(t){var r,n={},i=[];"object"===p()(t)?(r=t.format,n=t.config||{}):"string"==typeof t&&(r=t),n.supplements&&(i=n.supplements.map(function(e){return new pe[e]})),e._barcodeReaders.push(new pe[r](n,i))})}},{key:"_initConfig",value:function(){0}},{key:"_getExtendedLine",value:function(e,t){function r(r){var n=r*Math.sin(t),i=r*Math.cos(t);e[0].y-=n,e[0].x-=i,e[1].y+=n,e[1].x+=i}var n=.1*Math.sqrt(Math.pow(e[1].y-e[0].y,2)+Math.pow(e[1].x-e[0].x,2))|0;for(r(n);n>1&&(!this._inputImageWrapper.inImageWithBorder(e[0],0)||!this._inputImageWrapper.inImageWithBorder(e[1],0));)r(-(n>>=1));return e}},{key:"_getLine",value:function(e){return[{x:(e[1].x+e[0].x)/2,y:(e[1].y+e[0].y)/2},{x:(e[3].x+e[2].x)/2,y:(e[3].y+e[2].y)/2}]}},{key:"_tryDecode",value:function(e){var t=E.getBarcodeLine(this._inputImageWrapper,e[0],e[1]);E.toBinaryLine(t);for(var r=0;r<this._barcodeReaders.length;r++){var n=this._barcodeReaders[r].decodePattern(t.line);if(n)return{codeResult:n,barcodeLine:t}}return null}},{key:"_tryDecodeBruteForce",value:function(e,t,r){for(var n=Math.sqrt(Math.pow(e[1].x-e[0].x,2)+Math.pow(e[1].y-e[0].y,2)),i=Math.sin(r),a=Math.cos(r),o=1;o<16;o++){var u=n/16*o*(o%2==0?-1:1);t[0].y+=u*i,t[0].x-=u*a,t[1].y+=u*i,t[1].x-=u*a;var s=this._tryDecode(t);if(s)return s}return null}},{key:"decodeFromBoundingBox",value:function(e){this._canvas.ctx.overlay,this._config.debug;var t=this._getLine(e);if(null===t)return null;var r=Math.atan2(t[1].y-t[0].y,t[1].x-t[0].x);t=this._getExtendedLine(t,r);var n=this._tryDecode(t);return null===n&&(n=this._tryDecodeBruteForce(e,t,r)),null===n?null:{codeResult:n.codeResult,line:t,angle:r,pattern:n.barcodeLine.line,threshold:n.barcodeLine.threshold}}},{key:"decodeFromBoundingBoxes",value:function(e){for(var t=[],r=this._config.multiple,n=0;n<e.length;n++){var i=e[n],a=this.decodeFromBoundingBox(i)||{};if(a.box=i,r)t.push(a);else if(a.codeResult)return a}return r?{barcodes:t}:null}},{key:"setReaders",value:function(e){this._config.readers=e,this._barcodeReaders.length=0,this._initReaders()}}]),e}();function be(e,t){return function(e){return navigator.mediaDevices&&"function"==typeof navigator.mediaDevices.getUserMedia?navigator.mediaDevices.getUserMedia(e):Promise.reject(new Error("getUserMedia is not defined"))}(t).then(function(t){return new Promise(function(r){J=t,e.setAttribute("autoplay",!0),e.setAttribute("muted",!0),e.setAttribute("playsinline",!0),e.srcObject=t,e.addEventListener("loadedmetadata",function(){e.play(),r()})})}).then(function(e){var t=e.videoWidth,r=e.videoHeight;return new Promise(function(e,n){var i=10;!function a(){i>0?t>10&&r>10?e():window.setTimeout(a,500):n("Unable to play video stream. Is webcam working?"),i--}()})}.bind(null,e))}function xe(e){var t=e.width,r=e.height,n=e.facingMode,i=e.aspectRatio,a=e.deviceId;return void 0!==e.minAspectRatio&&e.minAspectRatio>0&&(i=e.minAspectRatio,console.log("WARNING: Constraint 'minAspectRatio' is deprecated; Use 'aspectRatio' instead")),void 0!==e.facing&&(n=e.facing,console.log("WARNING: Constraint 'facing' is deprecated. Use 'facingMode' instead'")),{width:t,height:r,facingMode:n,aspectRatio:i,deviceId:a}}function we(){var e=J&&J.getVideoTracks();return e&&e.length?e[0]:null}var Ce={request:function(e,t){return function(e){var t={audio:!1,video:xe(e)};return t.video.deviceId&&t.video.facingMode&&delete t.video.facingMode,Promise.resolve(t)}(t).then(be.bind(null,e))},release:function(){var e=J&&J.getVideoTracks();e&&e.length&&e[0].stop(),J=null},enumerateVideoDevices:function(){return(navigator.mediaDevices&&"function"==typeof navigator.mediaDevices.enumerateDevices?navigator.mediaDevices.enumerateDevices():Promise.reject(new Error("enumerateDevices is not defined"))).then(function(e){return e.filter(function(e){return"videoinput"===e.kind})})},getActiveStreamLabel:function(){var e=we();return e?e.label:""},getActiveTrack:we},ke=r(16),Ee=r(17).d2,Se=function(){function e(t){i()(this,e),this._inputStream=t,this._streamConfig=t.getConfig(),this._videoHeight=t.getRealHeight(),this._videoWidth=t.getRealWidth(),this._canvasHeight=t.getCanvasHeight(),this._canvasWidth=t.getCanvasWidth(),this._width=t.getWidth(),this._height=t.getHeight(),this._topRight=t.getTopRight(),this._data=new Uint8Array(this._width*this._height),this._grayData=new Uint8Array(this._videoWidth*this._videoHeight),this._canvasData=new Uint8Array(this._canvasWidth*this._canvasHeight),this._grayImageArray=ke(this._grayData,[this._videoHeight,this._videoWidth]).transpose(1,0),this._canvasImageArray=ke(this._canvasData,[this._canvasHeight,this._canvasWidth]).transpose(1,0),this._targetImageArray=this._canvasImageArray.hi(this._topRight.x+this._width,this._topRight.y+this._height).lo(this._topRight.x,this._topRight.y),this._stepSizeX=this._videoWidth/this._canvasWidth,this._stepSizeY=this._videoHeight/this._canvasHeight,console.log("FrameGrabber",JSON.stringify({videoSize:this._grayImageArray.shape,canvasSize:this._canvasImageArray.shape,stepSize:[this._stepSizeX,this._stepSizeY],size:this._targetImageArray.shape,topRight:this._topRight}))}return o()(e,[{key:"attachData",value:function(e){this._data=e}},{key:"getData",value:function(){return this._data}},{key:"grab",value:function(){var e=this._inputStream.getFrame();return!!e&&(this.scaleAndCrop(e),!0)}},{key:"scaleAndCrop",value:function(e){this._computeGray(e.data);for(var t=0;t<this._canvasHeight;t++)for(var r=0;r<this._canvasWidth;r++)this._canvasImageArray.set(r,t,0|Ee(this._grayImageArray,r*this._stepSizeX,t*this._stepSizeY));if(this._targetImageArray.shape[0]!==this._width||this._targetImageArray.shape[1]!==this._height)throw new Error("Shapes do not match!");for(var n=0;n<this._height;n++)for(var i=0;i<this._width;i++)this._data[n*this._width+i]=this._targetImageArray.get(i,n)}},{key:"getHeight",value:function(){return this._height}},{key:"getWidth",value:function(){return this._width}},{key:"_computeGray",value:function(e){var t=e.length;if(this._streamConfig&&this._streamConfig.singleChannel)for(var r=0,n=0;r<t;r+=4,n++)this._data[n]=e[r];else for(var i=0,a=0;i<t;i+=4,a++)this._data[a]=.299*e[i]+.587*e[i+1]+.114*e[i+2]}}]),e}(),Re=r(18),Ae=function(){function e(){i()(this,e)}return o()(e,null,[{key:"createImageStream",value:function(){var e,t,r,n={},i=null,a=0,o=0,u=!1,s=null,c=["canrecord","ended"],l={},h={x:0,y:0},f=0,d=0;function v(e,t){var r=l[e];if(r&&r.length>0)for(var i=0;i<r.length;i++)r[i].apply(n,t)}return n.trigger=v,n.getWidth=function(){return t},n.getHeight=function(){return r},n.setWidth=function(e){t=e},n.setHeight=function(e){r=e},n.getRealWidth=function(){return a},n.getRealHeight=function(){return o},n.setInputStream=function(n){e=(i=n).src,u=!1,Re(e,i.mime,function(e,n){e&&(console.log(e),process.exit(1)),u=!0,console.log(n.shape),s=n,a=0|n.shape[0],o=0|n.shape[1],t=i.size?a>o?i.size:a*i.size/o|0:a,r=i.size?a>o?o*i.size/a|0:i.size:o,f=t,d=r,setTimeout(function(){v("canrecord",[])},0)})},n.ended=function(){return!1},n.setAttribute=function(){},n.getConfig=function(){return i},n.pause=function(){},n.play=function(){},n.setCurrentTime=function(e){},n.addEventListener=function(e,t){-1!==c.indexOf(e)&&(l[e]||(l[e]=[]),l[e].push(t))},n.setTopRight=function(e){h.x=e.x,h.y=e.y},n.getTopRight=function(){return h},n.setCanvasSize=function(e,t){f=e,d=t},n.getCanvasHeight=function(){return d},n.getCanvasWidth=function(){return f},n.getFrame=function(){return u?s:null},n}}]),e}(),Pe=function(){function e(t,r){i()(this,e),this._threshold=t,this._points=[],this._center={rad:0,x:0,y:0},this._pointMap={},r&&this.add(r)}return o()(e,[{key:"add",value:function(e){this._pointMap[e.id]||(this._pointMap[e.id]=e,this._points.push(e),this._center.rad=this._points.reduce(function(e,t){return e+t.rad},0)/this._points.length,this._center.x=Math.cos(this._center.rad),this._center.y=Math.sin(this._center.rad))}},{key:"fits",value:function(e){return Math.abs(e.point.x*this._center.x+e.point.y*this._center.y)>this._threshold}},{key:"points",get:function(){return this._points}}]),e}(),De=[[0,1],[1,1],[1,0],[1,-1],[0,-1],[-1,-1],[-1,0],[-1,1]],Oe=function(){function e(t,r){i()(this,e),this.imageData=t.data,this.labelData=r.data,this.width=t.size.x}return o()(e,[{key:"trace",value:function(e,t,r,n){for(var i=0;i<7;i++){var a=e.cy+De[e.dir][0],o=e.cx+De[e.dir][1],u=a*this.width+o;if(this.imageData[u]===t&&(0===this.labelData[u]||this.labelData[u]===r))return this.labelData[u]=r,e.cy=a,e.cx=o,!0;0===this.labelData[u]&&(this.labelData[u]=n),e.dir=(e.dir+1)%8}return!1}},{key:"contourTracing",value:function(e,t,r,n,i){var a=null,o={cx:t,cy:e,dir:0};if(this.trace(o,n,r,i)){var u=a={x:t,y:e,dir:o.dir,next:null,prev:null},s=o.dir,c={x:o.cx,y:o.cy,dir:0,next:null,prev:u};u.next=c,u=c;do{o.dir=(o.dir+6)%8,this.trace(o,n,r,i),s!==o.dir?(u.dir=o.dir,c={x:o.cx,y:o.cy,dir:0,next:null,prev:u},u.next=c,u=c):(u.dir=s,u.x=o.cx,u.y=o.cy),s=o.dir}while(o.cx!==t||o.cy!==e);a.prev=u.prev,u.prev.next=a}return a}}]),e}(),Te=-32767,ze=-32766,Me=0,Ie=1,We=2,Ue=function(){function e(t,r){i()(this,e),this.imageData=t.data,this.labelData=r.data,this.width=t.size.x,this.height=t.size.y,this.tracer=new Oe(t,r)}return o()(e,[{key:"rasterize",value:function(e){for(var t=[],r=0;r<400;r++)t[r]=0;t[0]=this.imageData[0];for(var n,i=null,a=0,o=1;o<this.height-1;o++)for(var u=0,s=t[0],c=1;c<this.width-1;c++){var l=o*this.width+c;if(0===this.labelData[l]){var h=this.imageData[l];if(h!==s)if(0===u){var f=a+1;t[f]=h,s=h;var d=this.tracer.contourTracing(o,c,f,h,Te);if(null!==d){a++;var v={dir:Me,index:u=f,firstVertex:d,nextPeer:i,insideContours:null};null!==i&&(i.previousPeer=v),i=v}}else{var _=this.tracer.contourTracing(o,c,ze,h,u);if(null!==_){var g={dir:0===e?Ie:Me,firstVertex:_,index:e,insideContours:null};for(n=i;null!==n&&n.index!==u;)n=n.nextPeer;null!==n&&(g.nextPeer=n.insideContours,null!==n.insideContours&&(n.insideContours.previousPeer=g),n.insideContours=g)}}else this.labelData[l]=u}else this.labelData[l]===ze?(u=0,s=this.imageData[l]):this.labelData[l]===Te?(u=0,s=t[0]):s=t[u=this.labelData[l]]}for(n=i;null!==n;)n.index=e,n=n.nextPeer;return{cc:i,count:a}}},{key:"drawContour",value:function(e,t){var r=e.getContext("2d");r.strokeStyle="red",r.fillStyle="red",r.lineWidth=1;for(var n=t,i=n&&n.insideContours;null!==n;){var a=i||n;switch(i=null!==i?i.nextPeer:(n=n.nextPeer)&&n.insideContours,a.dir){case Me:r.strokeStyle="red";break;case Ie:r.strokeStyle="blue";break;case We:r.strokeStyle="green"}var o=a.firstVertex;r.beginPath(),r.moveTo(o.x,o.y);do{o=o.next,r.lineTo(o.x,o.y)}while(o!==a.firstVertex);r.stroke()}}}]),e}();var Ne,je,Le,Be,Ve,Fe,Ge,He,Xe,qe,Qe,Ye,Ze=function(e,t,r){"use asm";var n=new e.Uint8Array(r),i=t.size|0,a=e.Math.imul;function o(e,t){e=e|0;t=t|0;var r=0,a=0,o=0,u=0,s=0,c=0,l=0,h=0;for(r=1;(r|0)<(i-1|0);r=r+1|0){h=h+i|0;for(a=1;(a|0)<(i-1|0);a=a+1|0){u=h-i|0;s=h+i|0;c=a-1|0;l=a+1|0;o=(n[e+u+c|0]|0)+(n[e+u+l|0]|0)+(n[e+h+a|0]|0)+(n[e+s+c|0]|0)+(n[e+s+l|0]|0)|0;if((o|0)==(5|0)){n[t+h+a|0]=1}else{n[t+h+a|0]=0}}}return}function u(e,t,r){e=e|0;t=t|0;r=r|0;var o=0;o=a(i,i)|0;while((o|0)>0){o=o-1|0;n[r+o|0]=(n[e+o|0]|0)-(n[t+o|0]|0)|0}}function s(e,t,r){e=e|0;t=t|0;r=r|0;var o=0;o=a(i,i)|0;while((o|0)>0){o=o-1|0;n[r+o|0]=n[e+o|0]|0|(n[t+o|0]|0)|0}}function c(e){e=e|0;var t=0,r=0;r=a(i,i)|0;while((r|0)>0){r=r-1|0;t=(t|0)+(n[e+r|0]|0)|0}return t|0}function l(e,t){e=e|0;t=t|0;var r=0;r=a(i,i)|0;while((r|0)>0){r=r-1|0;n[e+r|0]=t}}function h(e,t){e=e|0;t=t|0;var r=0,a=0,o=0,u=0,s=0,c=0,l=0,h=0;for(r=1;(r|0)<(i-1|0);r=r+1|0){h=h+i|0;for(a=1;(a|0)<(i-1|0);a=a+1|0){u=h-i|0;s=h+i|0;c=a-1|0;l=a+1|0;o=(n[e+u+c|0]|0)+(n[e+u+l|0]|0)+(n[e+h+a|0]|0)+(n[e+s+c|0]|0)+(n[e+s+l|0]|0)|0;if((o|0)>(0|0)){n[t+h+a|0]=1}else{n[t+h+a|0]=0}}}return}function f(e,t){e=e|0;t=t|0;var r=0;r=a(i,i)|0;while((r|0)>0){r=r-1|0;n[t+r|0]=n[e+r|0]|0}}function d(e){e=e|0;var t=0,r=0;for(t=0;(t|0)<(i-1|0);t=t+1|0){n[e+t|0]=0;n[e+r|0]=0;r=r+i-1|0;n[e+r|0]=0;r=r+1|0}for(t=0;(t|0)<(i|0);t=t+1|0){n[e+r|0]=0;r=r+1|0}}function v(){var e=0,t=0,r=0,n=0,v=0,_=0;t=a(i,i)|0;r=t+t|0;n=r+t|0;l(n,0);d(e);do{o(e,t);h(t,r);u(e,r,r);s(n,r,n);f(t,e);v=c(e)|0;_=(v|0)==0|0}while(!_)}return{skeletonize:v}},Ke={ctx:{binary:null},dom:{binary:null}},Je={x:0,y:0};function $e(e){var t=e.reduce(function(e,t){return e+t.rad},0)/e.length;(t=(180*t/Math.PI+90)%180-90)<0&&(t+=180),t=(180-t)*Math.PI/180;var r=Math.cos(t),n=Math.sin(t),i=new Float32Array([r,n,-n,r]);Ke.ctx.binary;e.forEach(function(e){for(var t=e.box,r=0;r<4;r++)t[r]=et(t[r],i)});var a=Xe.size.x,o=Xe.size.y,u=-a,s=-o;e.forEach(function(e){e.box.forEach(function(e){var t=e.x,r=e.y;t<a&&(a=t),t>u&&(u=t),r<o&&(o=r),r>s&&(s=r)})});var c=[{x:a,y:o},{x:u,y:o},{x:u,y:s},{x:a,y:s}];for(var l=function(e){var t=e[0],r=e[1],n=e[2],i=e[3],a=t*i-n*r;if(!a)return null;return new Float32Array([i/a,-r/a,-n/a,t/a])}(i),h=0;h<4;h++)c[h]=et(c[h],l);return Ne.halfSample&&c.forEach(function(e){e.x*=2,e.y*=2}),c}function et(e,t){var r=e.x,n=e.y;return{x:t[0]*r+t[2]*n,y:t[1]*r+t[3]*n}}function tt(){var e,t,r,n;t=Xe,r=l(e=je),n=t.data,e.data.forEach(function(e,t){n[t]=e<r?1:0}),Xe.zeroBorder()}function rt(e){return function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"rad",n=[];return e.forEach(function(e,i){var a={rad:e[r],point:e,id:i},o=n.find(function(e){return e.fits(a)});o?o.add(a):n.push(new Pe(t,a))}),n}(e,.9).reduce(function(e,t){var r=t.points.length;return r>e.count?{item:t,count:r}:e},{item:{points:[]},count:0}).item.points.map(function(e){return e.point})}function nt(e,t){Xe.subImageAsCopy(Be,e,t),Ye.skeletonize()}function it(e,t,r,n){if(e.length>1){var i=Math.ceil(qe.x/3),a=e.filter(function(e){return e.m00>i});if(a.length>1){var o=rt(a),u=0|o.length;if(u>1&&u<<2>=3*a.length&&u<<2>e.length){var s=o.reduce(function(e,t){return e+t.rad},0)/u;return{index:t,pos:{x:r,y:n},box:[{x:r,y:n},{x:r+Be.size.x,y:n},{x:r+Be.size.x,y:n+Be.size.y},{x:r,y:n+Be.size.y}],moments:o,rad:s,x:Math.cos(s),y:Math.sin(s)}}}}return null}var at,ot,ut,st,ct,lt,ht,ft={init:function(e,t){Ne=t,Qe=e,function(){je=Ne.halfSample?new g({x:Qe.size.x/2|0,y:Qe.size.y/2|0}):Qe,qe=d(Ne.patchSize,je.size),Je.x=je.size.x/qe.x|0,Je.y=je.size.y/qe.y|0,Xe=new g(je.size,void 0,Uint8Array,!1),Ve=new g(qe,void 0,Array,!0);var e=new ArrayBuffer(65536);Be=new g(qe,new Uint8Array(e,0,qe.x*qe.y)),Le=new g(qe,new Uint8Array(e,qe.x*qe.y*3,qe.x*qe.y),void 0,!0),Ye=Ze("undefined"!=typeof window?window:"undefined"!=typeof self?self:global,{size:qe.x},e),He=new g({x:je.size.x/Be.size.x|0,y:je.size.y/Be.size.y|0},void 0,Array,!0),Fe=new g(He.size,void 0,void 0,!0),Ge=new g(He.size,void 0,Int32Array,!0)}(),Ne.useWorker||"undefined"==typeof document||(Ke.dom.binary=document.createElement("canvas"),Ke.dom.binary.className="binaryBuffer",Ke.ctx.binary=Ke.dom.binary.getContext("2d"),Ke.dom.binary.width=Xe.size.x,Ke.dom.binary.height=Xe.size.y)},locate:function(){Ne.halfSample&&function(e,t){for(var r=e.data,n=e.size.x,i=t.data,a=r.length,o=n/2,u=0,s=n,c=0;s<a;){for(var l=0;l<o;l++)i[c]=r[u]+r[u+1]+r[s]+r[s+1]>>2,c++,u+=2,s+=2;u+=n,s+=n}}(Qe,je),tt();var e=function(){Ke.ctx.binary;for(var e=[],t=0;t<Je.x;t++)for(var r=0;r<Je.y;r++){var n=Be.size.x*t,i=Be.size.y*r;nt(n,i),Le.zeroBorder(),Ve.data.fill(0);var a=new Ue(Le,Ve).rasterize(0),o=it(Ve.moments(a.count),r*Je.x+t,n,i);o&&e.push(o)}return e}();if(e.length<Je.x*Je.y*.05)return null;var t=function(e){var t=.95,r=0;function n(){for(var e=0;e<Ge.data.length;e++)if(0===Ge.data[e]&&1===Fe.data[e])return e;return Ge.data.length}function i(e){var n=e%Ge.size.x,a=e/Ge.size.x|0;if(e<Ge.data.length){var o=He.data[e];Ge.data[e]=r,De.forEach(function(e){var r=a+e[0],u=n+e[1],s=r*Ge.size.x+u;if(0===Fe.data[s])Ge.data[s]=Number.MAX_VALUE;else if(0===Ge.data[s]){var c=He.data[s];Math.abs(c.x*o.x+c.y*o.y)>t&&i(s)}})}}Fe.data.fill(0),Ge.data.fill(0),He.data.fill(null),e.forEach(function(e){He.data[e.index]=e,Fe.data[e.index]=1}),Fe.zeroBorder();for(var a=0;(a=n())<Ge.data.length;)r++,i(a);return r}(e);if(t<1)return null;var r=function(e){var t=new Array(e).fill(0);return Ge.data.forEach(function(e){e>0&&t[e-1]++}),t.map(function(e,t){return{val:e,label:t+1}}).sort(function(e,t){return t.val-e.val}).filter(function(e){return e.val>=5})}(t);return 0===r.length?null:function(e,t){for(var r=[],n=(Ke.ctx.binary,function(t){var n=[];Ge.data.forEach(function(r,i){r===e[t].label&&n.push(He.data[i])});var i=$e(n);i&&r.push(i)}),i=0;i<e.length;i++)n(i);return r}(r)},checkImageConstraints:function(e,t){var r=e.getWidth(),n=e.getHeight(),i=t.halfSample?1:0;if(e.getConfig().area){var a=_(r,n,e.getConfig().area);e.setTopRight({x:a.sx,y:a.sy}),e.setCanvasSize(r,n),r=a.sw,n=a.sh}var o={x:r>>i,y:n>>i},u=d(t.patchSize,o);if(e.setWidth((o.x/u.x<<i)*u.x|0),e.setHeight((o.y/u.y<<i)*u.y|0),e.getWidth()%u.x==0&&e.getHeight()%u.y==0)return!0;throw new Error("Image dimensions do not comply with the current settings: width (".concat(r,") and height (").concat(n,") must be a multiple of ").concat(u.x))}},dt={ctx:{image:null,overlay:null},dom:{image:null,overlay:null}},vt=[],_t=!0,gt={};function yt(e){!function(e){st=e||new g({x:at.getWidth(),y:at.getHeight()});0;ct=[{x:0,y:0},{x:0,y:st.size.y},{x:st.size.x,y:st.size.y},{x:st.size.x,y:0}],ft.init(st,gt.locator)}(e),lt=new me(gt.decoder,st)}function pt(e){var t;if("VideoStream"===gt.inputStream.type)t=document.createElement("video"),at=Ae.createVideoStream(t);else if("ImageStream"===gt.inputStream.type)at=Ae.createImageStream();else if("LiveStream"===gt.inputStream.type){var r=mt();r&&((t=r.querySelector("video"))||(t=document.createElement("video"),r.appendChild(t))),at=Ae.createLiveStream(t),Ce.request(t,gt.inputStream.constraints).then(function(){return at.trigger("canrecord")},function(t){return e(t)})}at.setAttribute("preload","auto"),at.setInputStream(gt.inputStream),at.addEventListener("canrecord",function(e){ft.checkImageConstraints(at,gt.locator),function(){if("undefined"!=typeof document){var e=mt();if(dt.dom.image=document.querySelector("canvas.imgBuffer"),dt.dom.image||(dt.dom.image=document.createElement("canvas"),dt.dom.image.className="imgBuffer",e&&"ImageStream"===gt.inputStream.type&&e.appendChild(dt.dom.image)),dt.ctx.image=dt.dom.image.getContext("2d"),dt.dom.image.width=at.getCanvasWidth(),dt.dom.image.height=at.getCanvasHeight(),dt.dom.overlay=document.querySelector("canvas.drawingBuffer"),!dt.dom.overlay){dt.dom.overlay=document.createElement("canvas"),dt.dom.overlay.className="drawingBuffer",e&&e.appendChild(dt.dom.overlay);var t=document.createElement("br");t.setAttribute("clear","all"),e&&e.appendChild(t)}dt.ctx.overlay=dt.dom.overlay.getContext("2d"),dt.dom.overlay.width=at.getCanvasWidth(),dt.dom.overlay.height=at.getCanvasHeight()}}(),ot=new Se(at,dt.dom.image),Rt(gt.numOfWorkers,function(){0===gt.numOfWorkers&&yt(),function(e){at.play(),e()}(e)})}.bind(void 0,e))}function mt(){var e=gt.inputStream.target;if(e&&e.nodeName&&1===e.nodeType)return e;var t="string"==typeof e?e:"#interactive.viewport";return document.querySelector(t)}function bt(e,t){e.forEach(function(e){e.x+=t.x,e.y+=t.y})}function xt(e,t){var r=e;if(e&&_t){var n=at.getTopRight();0===n.x&&0===n.y||function e(t,r){t.barcodes&&t.barcodes.forEach(function(t){return e(t,r)}),t.line&&bt(t.line,r),t.box&&bt(t.box,r),t.boxes&&t.boxes.forEach(function(e){return bt(e,r)})}(e,n),function e(t,r,n,i){r&&ht&&(t.barcodes?t.barcodes.forEach(function(t){t.codeResult&&e(t,r,n,i)}):t.codeResult&&ht.addResult(r,n,i,t.codeResult))}(e,t,at.getCanvasWidth(),at.getCanvasHeight()),r=e.barcodes||e}c.publish("processed",r),function(e){return e&&(!!e.codeResult||e.barcodes&&e.barcodes.some(function(e){return e.codeResult}))}(e)&&c.publish("detected",r)}function wt(){var e=gt.locate?ft.locate():[[ct[0],ct[1],ct[2],ct[3]]];if(e){var t=lt.decodeFromBoundingBoxes(e)||{};t.boxes=e,xt(t,st.data)}else xt()}function Ct(){var e;if(_t){if(vt.length>0){if(!(e=vt.find(function(e){return!e.busy})))return;ot.attachData(e.imageData)}else ot.attachData(st.data);ot.grab()&&(e?(e.busy=!0,e.worker.postMessage({cmd:"process",imageData:e.imageData},[e.imageData.buffer])):wt())}else wt()}function kt(){var e,t;_t&&"LiveStream"===gt.inputStream.type?(e=1e3/(gt.frequency||60),t=null,ut=!1,function r(n){t=t||n,ut||(n>=t&&(t+=e,Ct()),window.requestAnimationFrame(r))}(performance.now())):Ct()}function Et(e){var t,r=function(){var e;"undefined"!=typeof __factorySource__&&(e=__factorySource__);var t=new Blob(["("+St.toString()+")("+e+");"],{type:"text/javascript"});return window.URL.createObjectURL(t)}(),n={worker:new Worker(r),imageData:new Uint8Array(at.getWidth()*at.getHeight()),busy:!0};n.worker.onmessage=function(t){"initialized"===t.data.event?(URL.revokeObjectURL(r),n.busy=!1,n.imageData=new Uint8Array(t.data.imageData),e(n)):"processed"===t.data.event?(n.imageData=new Uint8Array(t.data.imageData),n.busy=!1,xt(t.data.result,n.imageData)):t.data.event},n.worker.postMessage({cmd:"init",size:{x:at.getWidth(),y:at.getHeight()},imageData:n.imageData,config:(t=gt,m(t,{inputStream:{target:null}}))},[n.imageData.buffer])}function St(e){var t,r;!e||(t=e().default)?self.onmessage=function(e){if("init"===e.data.cmd){var a=e.data.config;a.numOfWorkers=0,r=new t.ImageWrapper({x:e.data.size.x,y:e.data.size.y},new Uint8Array(e.data.imageData)),t.init(a,i,r),t.onProcessed(n)}else"process"===e.data.cmd?(r.data=new Uint8Array(e.data.imageData),t.start()):"setReaders"===e.data.cmd&&t.setReaders(e.data.readers)}:self.postMessage({event:"error",message:"Quagga could not be created"});function n(e){self.postMessage({event:"processed",imageData:r.data,result:e},[r.data.buffer])}function i(){self.postMessage({event:"initialized",imageData:r.data},[r.data.buffer])}}function Rt(e,t){var r=e-vt.length;if(0!==r)if(r<0)vt.slice(r).forEach(function(e){e.worker.terminate()}),vt=vt.slice(0,r),t&&t();else for(var n=0;n<r;n++)Et(function(r){vt.push(r),vt.length>=e&&t&&t()});else t&&t()}t.default={init:function(e,t,r){gt=m(b,e),r?(_t=!1,yt(r),t&&t()):pt(t)},start:function(){kt()},stop:function(){ut=!0,Rt(0),"LiveStream"===gt.inputStream.type&&(Ce.release(),at.clearEventHandlers())},pause:function(){ut=!0},onDetected:function(e){c.subscribe("detected",e)},offDetected:function(e){c.unsubscribe("detected",e)},onProcessed:function(e){c.subscribe("processed",e)},offProcessed:function(e){c.unsubscribe("processed",e)},setReaders:function(e){!function(e){lt?lt.setReaders(e):_t&&vt.length>0&&vt.forEach(function(t){return t.worker.postMessage({cmd:"setReaders",readers:e})})}(e)},registerResultCollector:function(e){e&&"function"==typeof e.addResult&&(ht=e)},canvas:dt,decodeSingle:function(e,t){var r=this;e=m({inputStream:{type:"ImageStream",sequence:!1,size:800,src:e.src},numOfWorkers:1,locator:{halfSample:!1}},e),this.init(e,function(){c.once("processed",function(e){r.stop(),t.call(null,e)},!0),kt()})},ImageWrapper:g,ImageDebug:u,ResultCollector:s,CameraAccess:Ce}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,